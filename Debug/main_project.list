
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c8  080090c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf0  20000074  08009144  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  08009144  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019118  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033da  00000000  00000000  000391bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003556  00000000  00000000  0003ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017349  00000000  00000000  000424e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a39ad  00000000  00000000  0005982f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd1dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006060  00000000  00000000  000fd22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008fbc 	.word	0x08008fbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008fbc 	.word	0x08008fbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f001 f8d6 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f834 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 fb22 	bl	80013b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d70:	f000 fb00 	bl	8001374 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 faaa 	bl	80012cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d78:	f000 f896 	bl	8000ea8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d7c:	f000 f8f4 	bl	8000f68 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d80:	f000 f9d0 	bl	8001124 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d84:	f000 fa3e 	bl	8001204 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000d88:	f000 faca 	bl	8001320 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f970 	bl	8001070 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d90:	f004 ff20 	bl	8005bd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DrivingTask */
  DrivingTaskHandle = osThreadNew(DrivingTask_Init, NULL, &DrivingTask_attributes);
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <main+0x5c>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0x60>)
 8000d9a:	f004 ff65 	bl	8005c68 <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <main+0x64>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* creation of flameTask */
  flameTaskHandle = osThreadNew(flameTask_Init, NULL, &flameTask_attributes);
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <main+0x68>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <main+0x6c>)
 8000daa:	f004 ff5d 	bl	8005c68 <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <main+0x70>)
 8000db2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000db4:	f004 ff32 	bl	8005c1c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <main+0x58>
 8000dba:	bf00      	nop
 8000dbc:	08009024 	.word	0x08009024
 8000dc0:	08001725 	.word	0x08001725
 8000dc4:	200003f4 	.word	0x200003f4
 8000dc8:	08009048 	.word	0x08009048
 8000dcc:	08001831 	.word	0x08001831
 8000dd0:	200003f8 	.word	0x200003f8

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	; 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 fc82 	bl	80086ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e44:	2310      	movs	r3, #16
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e52:	2304      	movs	r3, #4
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fb12 	bl	8003484 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e66:	f000 fd27 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2102      	movs	r1, #2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fd74 	bl	8003974 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e92:	f000 fd11 	bl	80018b8 <Error_Handler>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3750      	adds	r7, #80	; 0x50
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ebc:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <MX_ADC1_Init+0xb8>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <MX_ADC1_Init+0xbc>)
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000f0a:	f001 f899 	bl	8002040 <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 fcd0 	bl	80018b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f20:	2304      	movs	r3, #4
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000f2a:	f001 f9db 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 fcc0 	bl	80018b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f38:	230a      	movs	r3, #10
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC1_Init+0xb4>)
 8000f46:	f001 f9cd 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f50:	f000 fcb2 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000190 	.word	0x20000190
 8000f60:	40012000 	.word	0x40012000
 8000f64:	0f000001 	.word	0x0f000001

08000f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b092      	sub	sp, #72	; 0x48
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2220      	movs	r2, #32
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f007 fbaa 	bl	80086ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <MX_TIM1_Init+0x100>)
 8000f9a:	4a34      	ldr	r2, [pc, #208]	; (800106c <MX_TIM1_Init+0x104>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fa0:	2253      	movs	r2, #83	; 0x53
 8000fa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fac:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc4:	4828      	ldr	r0, [pc, #160]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fc6:	f002 ff44 	bl	8003e52 <HAL_TIM_PWM_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000fd0:	f000 fc72 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4821      	ldr	r0, [pc, #132]	; (8001068 <MX_TIM1_Init+0x100>)
 8000fe4:	f004 f92c 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000fee:	f000 fc63 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff2:	2360      	movs	r3, #96	; 0x60
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_TIM1_Init+0x100>)
 8001018:	f003 fb32 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001022:	f000 fc49 	bl	80018b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <MX_TIM1_Init+0x100>)
 800104a:	f004 f967 	bl	800531c <HAL_TIMEx_ConfigBreakDeadTime>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001054:	f000 fc30 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <MX_TIM1_Init+0x100>)
 800105a:	f000 fd8f 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 800105e:	bf00      	nop
 8001060:	3748      	adds	r7, #72	; 0x48
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000238 	.word	0x20000238
 800106c:	40010000 	.word	0x40010000

08001070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_TIM2_Init+0xb0>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_TIM2_Init+0xb0>)
 800109c:	f240 3247 	movw	r2, #839	; 0x347
 80010a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
 80010ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010bc:	4818      	ldr	r0, [pc, #96]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010be:	f002 fec8 	bl	8003e52 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 fbf6 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4619      	mov	r1, r3
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_TIM2_Init+0xb0>)
 80010dc:	f004 f8b0 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010e6:	f000 fbe7 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM2_Init+0xb0>)
 8001102:	f003 fabd 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800110c:	f000 fbd4 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <MX_TIM2_Init+0xb0>)
 8001112:	f000 fd33 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000280 	.word	0x20000280

08001124 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001150:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <MX_TIM3_Init+0xdc>)
 8001152:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001156:	2253      	movs	r2, #83	; 0x53
 8001158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_TIM3_Init+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001162:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_TIM3_Init+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001174:	4821      	ldr	r0, [pc, #132]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001176:	f002 fe1d 	bl	8003db4 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fb9a 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	4619      	mov	r1, r3
 8001190:	481a      	ldr	r0, [pc, #104]	; (80011fc <MX_TIM3_Init+0xd8>)
 8001192:	f003 fb37 	bl	8004804 <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800119c:	f000 fb8c 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011a0:	4816      	ldr	r0, [pc, #88]	; (80011fc <MX_TIM3_Init+0xd8>)
 80011a2:	f002 ff55 	bl	8004050 <HAL_TIM_IC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011ac:	f000 fb84 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_TIM3_Init+0xd8>)
 80011c0:	f004 f83e 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011ca:	f000 fb75 	bl	80018b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011d2:	2301      	movs	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	2204      	movs	r2, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM3_Init+0xd8>)
 80011e6:	f003 f9af 	bl	8004548 <HAL_TIM_IC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011f0:	f000 fb62 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200002c8 	.word	0x200002c8
 8001200:	40000400 	.word	0x40000400

08001204 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <MX_TIM4_Init+0xc0>)
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <MX_TIM4_Init+0xc4>)
 800122a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <MX_TIM4_Init+0xc0>)
 800122e:	2253      	movs	r2, #83	; 0x53
 8001230:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <MX_TIM4_Init+0xc0>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_TIM4_Init+0xc0>)
 800123a:	f242 720f 	movw	r2, #9999	; 0x270f
 800123e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_TIM4_Init+0xc0>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_TIM4_Init+0xc0>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <MX_TIM4_Init+0xc0>)
 800124e:	f002 fe00 	bl	8003e52 <HAL_TIM_PWM_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001258:	f000 fb2e 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4619      	mov	r1, r3
 800126a:	4816      	ldr	r0, [pc, #88]	; (80012c4 <MX_TIM4_Init+0xc0>)
 800126c:	f003 ffe8 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001276:	f000 fb1f 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127a:	2360      	movs	r3, #96	; 0x60
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_TIM4_Init+0xc0>)
 8001292:	f003 f9f5 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800129c:	f000 fb0c 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2204      	movs	r2, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM4_Init+0xc0>)
 80012a8:	f003 f9ea 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012b2:	f000 fb01 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM4_Init+0xc0>)
 80012b8:	f000 fc60 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000310 	.word	0x20000310
 80012c8:	40000800 	.word	0x40000800

080012cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f004 f870 	bl	80053e8 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 fad3 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000358 	.word	0x20000358
 800131c:	40004400 	.word	0x40004400

08001320 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART6_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART6_UART_Init+0x4c>)
 800132c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001330:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART6_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART6_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART6_UART_Init+0x4c>)
 8001358:	f004 f846 	bl	80053e8 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 faa9 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000039c 	.word	0x2000039c
 8001370:	40011400 	.word	0x40011400

08001374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_DMA_Init+0x3c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <MX_DMA_Init+0x3c>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_DMA_Init+0x3c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	2038      	movs	r0, #56	; 0x38
 800139c:	f001 fb2d 	bl	80029fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013a0:	2038      	movs	r0, #56	; 0x38
 80013a2:	f001 fb46 	bl	8002a32 <HAL_NVIC_EnableIRQ>

}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <MX_GPIO_Init+0x128>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a42      	ldr	r2, [pc, #264]	; (80014dc <MX_GPIO_Init+0x128>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <MX_GPIO_Init+0x128>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_GPIO_Init+0x128>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <MX_GPIO_Init+0x128>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <MX_GPIO_Init+0x128>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <MX_GPIO_Init+0x128>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a34      	ldr	r2, [pc, #208]	; (80014dc <MX_GPIO_Init+0x128>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <MX_GPIO_Init+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_GPIO_Init+0x128>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <MX_GPIO_Init+0x128>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_GPIO_Init+0x128>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001442:	f002 f805 	bl	8003450 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <MX_GPIO_Init+0x130>)
 800144e:	f001 ffff 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_GPIO_Init+0x134>)
 800145a:	f001 fff9 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001464:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_GPIO_Init+0x134>)
 8001476:	f001 fe67 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800147a:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 800147e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001494:	f001 fe58 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001498:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_GPIO_Init+0x130>)
 80014b2:	f001 fe49 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80014b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_GPIO_Init+0x134>)
 80014d0:	f001 fe3a 	bl	8003148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f040 8083 	bne.w	8001608 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0)
 8001502:	4b45      	ldr	r3, [pc, #276]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11a      	bne.n	8001540 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800150a:	2104      	movs	r1, #4
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f003 fa41 	bl	8004994 <HAL_TIM_ReadCapturedValue>
 8001512:	4603      	mov	r3, r0
 8001514:	4a41      	ldr	r2, [pc, #260]	; (800161c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001516:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x128>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
}
 800153e:	e063      	b.n	8001608 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d15f      	bne.n	8001608 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001548:	2104      	movs	r1, #4
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f003 fa22 	bl	8004994 <HAL_TIM_ReadCapturedValue>
 8001550:	4603      	mov	r3, r0
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001554:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d907      	bls.n	800157a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x130>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e00f      	b.n	800159a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d909      	bls.n	800159a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001594:	33ff      	adds	r3, #255	; 0xff
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001598:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x134>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffb0 	bl	8000504 <__aeabi_ui2d>
 80015a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001610 <HAL_TIM_IC_CaptureCallback+0x120>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f825 	bl	80005f8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015be:	f7ff f945 	bl	800084c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa27 	bl	8000a1c <__aeabi_d2uiz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_TIM_IC_CaptureCallback+0x138>)
 80015d4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x128>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015ea:	621a      	str	r2, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a12      	ldr	r2, [r2, #32]
 80015f6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0204 	bic.w	r2, r2, #4
 8001606:	60da      	str	r2, [r3, #12]
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	b020c49c 	.word	0xb020c49c
 8001614:	3fa16872 	.word	0x3fa16872
 8001618:	200003ec 	.word	0x200003ec
 800161c:	200003e0 	.word	0x200003e0
 8001620:	200003e4 	.word	0x200003e4
 8001624:	200003e8 	.word	0x200003e8
 8001628:	200003ed 	.word	0x200003ed
 800162c:	200002c8 	.word	0x200002c8

08001630 <gogo>:

void gogo (){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <gogo+0x34>)
 800163a:	f001 ff09 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <gogo+0x34>)
 8001644:	f001 ff04 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <gogo+0x38>)
 8001650:	f001 fefe 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2140      	movs	r1, #64	; 0x40
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <gogo+0x38>)
 800165a:	f001 fef9 	bl	8003450 <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020000 	.word	0x40020000
 8001668:	40020800 	.word	0x40020800

0800166c <dele>:

void dele(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <dele+0x34>)
 8001676:	f001 feeb 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <dele+0x34>)
 8001680:	f001 fee6 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <dele+0x38>)
 800168c:	f001 fee0 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <dele+0x38>)
 8001696:	f001 fedb 	bl	8003450 <HAL_GPIO_WritePin>

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020800 	.word	0x40020800

080016a8 <rotate>:

void rotate(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <rotate+0x34>)
 80016b2:	f001 fecd 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <rotate+0x34>)
 80016bc:	f001 fec8 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <rotate+0x38>)
 80016c8:	f001 fec2 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <rotate+0x38>)
 80016d2:	f001 febd 	bl	8003450 <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020800 	.word	0x40020800

080016e4 <HCSR04_Read>:



void HCSR04_Read (void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <HCSR04_Read+0x38>)
 80016f0:	f001 feae 	bl	8003450 <HAL_GPIO_WritePin>
	HAL_Delay(0.01);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f000 fc7f 	bl	8001ff8 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <HCSR04_Read+0x38>)
 8001702:	f001 fea5 	bl	8003450 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HCSR04_Read+0x3c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HCSR04_Read+0x3c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	60da      	str	r2, [r3, #12]
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020000 	.word	0x40020000
 8001720:	200002c8 	.word	0x200002c8

08001724 <DrivingTask_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DrivingTask_Init */
void DrivingTask_Init(void *argument)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800172c:	2104      	movs	r1, #4
 800172e:	4834      	ldr	r0, [pc, #208]	; (8001800 <DrivingTask_Init+0xdc>)
 8001730:	f002 fce8 	bl	8004104 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001734:	2100      	movs	r1, #0
 8001736:	4833      	ldr	r0, [pc, #204]	; (8001804 <DrivingTask_Init+0xe0>)
 8001738:	f002 fbda 	bl	8003ef0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800173c:	2104      	movs	r1, #4
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <DrivingTask_Init+0xe0>)
 8001740:	f002 fbd6 	bl	8003ef0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001744:	2100      	movs	r1, #0
 8001746:	4830      	ldr	r0, [pc, #192]	; (8001808 <DrivingTask_Init+0xe4>)
 8001748:	f002 fbd2 	bl	8003ef0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800174c:	2100      	movs	r1, #0
 800174e:	482f      	ldr	r0, [pc, #188]	; (800180c <DrivingTask_Init+0xe8>)
 8001750:	f002 fbce 	bl	8003ef0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  TIM4->CCR1 = 7000;
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <DrivingTask_Init+0xec>)
 8001756:	f641 3258 	movw	r2, #7000	; 0x1b58
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  TIM4->CCR2 = 7000;
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <DrivingTask_Init+0xec>)
 800175e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
            TIM1->CCR1 = 7000;
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <DrivingTask_Init+0xf0>)
 8001766:	f641 3258 	movw	r2, #7000	; 0x1b58
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
	  HCSR04_Read();
 800176c:	f7ff ffba 	bl	80016e4 <HCSR04_Read>
sprintf(uart,"%d\r\n",Distance);
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <DrivingTask_Init+0xf4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4929      	ldr	r1, [pc, #164]	; (800181c <DrivingTask_Init+0xf8>)
 8001778:	4829      	ldr	r0, [pc, #164]	; (8001820 <DrivingTask_Init+0xfc>)
 800177a:	f006 ffbf 	bl	80086fc <siprintf>
HAL_UART_Transmit(&huart2,uart,sizeof(uart),0xFFFF);
 800177e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	4926      	ldr	r1, [pc, #152]	; (8001820 <DrivingTask_Init+0xfc>)
 8001788:	4826      	ldr	r0, [pc, #152]	; (8001824 <DrivingTask_Init+0x100>)
 800178a:	f003 fe7a 	bl	8005482 <HAL_UART_Transmit>
 osDelay(100);
 800178e:	2064      	movs	r0, #100	; 0x64
 8001790:	f004 fafc 	bl	8005d8c <osDelay>
  if(Distance < 20){
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <DrivingTask_Init+0xf4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b13      	cmp	r3, #19
 800179a:	d80c      	bhi.n	80017b6 <DrivingTask_Init+0x92>
    dele();
 800179c:	f7ff ff66 	bl	800166c <dele>
    osDelay(1000);
 80017a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a4:	f004 faf2 	bl	8005d8c <osDelay>
    rotate();
 80017a8:	f7ff ff7e 	bl	80016a8 <rotate>
    osDelay(3000);
 80017ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017b0:	f004 faec 	bl	8005d8c <osDelay>
 80017b4:	e7ce      	b.n	8001754 <DrivingTask_Init+0x30>
 }
  else if(adc[0]<2000){
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <DrivingTask_Init+0x104>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017be:	d21c      	bcs.n	80017fa <DrivingTask_Init+0xd6>
	  dele();
 80017c0:	f7ff ff54 	bl	800166c <dele>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <DrivingTask_Init+0x108>)
 80017cc:	f001 fe40 	bl	8003450 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2120      	movs	r1, #32
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <DrivingTask_Init+0x108>)
 80017d6:	f001 fe3b 	bl	8003450 <HAL_GPIO_WritePin>
	  		osDelay(2000);
 80017da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017de:	f004 fad5 	bl	8005d8c <osDelay>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <DrivingTask_Init+0x108>)
 80017ea:	f001 fe31 	bl	8003450 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <DrivingTask_Init+0x108>)
 80017f4:	f001 fe2c 	bl	8003450 <HAL_GPIO_WritePin>
 80017f8:	e7ac      	b.n	8001754 <DrivingTask_Init+0x30>
	  	   }
  else{
	  gogo();
 80017fa:	f7ff ff19 	bl	8001630 <gogo>
  {
 80017fe:	e7a9      	b.n	8001754 <DrivingTask_Init+0x30>
 8001800:	200002c8 	.word	0x200002c8
 8001804:	20000310 	.word	0x20000310
 8001808:	20000238 	.word	0x20000238
 800180c:	20000280 	.word	0x20000280
 8001810:	40000800 	.word	0x40000800
 8001814:	40010000 	.word	0x40010000
 8001818:	200003ed 	.word	0x200003ed
 800181c:	08008fec 	.word	0x08008fec
 8001820:	20000090 	.word	0x20000090
 8001824:	20000358 	.word	0x20000358
 8001828:	200003f0 	.word	0x200003f0
 800182c:	40020000 	.word	0x40020000

08001830 <flameTask_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_flameTask_Init */
void flameTask_Init(void *argument)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN flameTask_Init */
	HAL_ADC_Start_DMA(&hadc1, adc, 2);
 8001838:	2202      	movs	r2, #2
 800183a:	4919      	ldr	r1, [pc, #100]	; (80018a0 <flameTask_Init+0x70>)
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <flameTask_Init+0x74>)
 800183e:	f000 fc43 	bl	80020c8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  memset(uart,0,sizeof(uart));
 8001842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001846:	2100      	movs	r1, #0
 8001848:	4817      	ldr	r0, [pc, #92]	; (80018a8 <flameTask_Init+0x78>)
 800184a:	f006 ff4f 	bl	80086ec <memset>
	  sprintf(uart,"flame:%d\r\n",adc[0]);
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <flameTask_Init+0x70>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4915      	ldr	r1, [pc, #84]	; (80018ac <flameTask_Init+0x7c>)
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <flameTask_Init+0x78>)
 8001858:	f006 ff50 	bl	80086fc <siprintf>
	   HAL_UART_Transmit(&huart6,uart,sizeof(uart),0xFFFF);
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	4910      	ldr	r1, [pc, #64]	; (80018a8 <flameTask_Init+0x78>)
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <flameTask_Init+0x80>)
 8001868:	f003 fe0b 	bl	8005482 <HAL_UART_Transmit>
	   memset(uart,0,sizeof(uart));
 800186c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001870:	2100      	movs	r1, #0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <flameTask_Init+0x78>)
 8001874:	f006 ff3a 	bl	80086ec <memset>
	   sprintf(uart,"gas:%d\r\n",adc[1]);
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <flameTask_Init+0x70>)
 800187a:	885b      	ldrh	r3, [r3, #2]
 800187c:	461a      	mov	r2, r3
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <flameTask_Init+0x84>)
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <flameTask_Init+0x78>)
 8001882:	f006 ff3b 	bl	80086fc <siprintf>
	   	   HAL_UART_Transmit(&huart6,uart,sizeof(uart),0xFFFF);
 8001886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188e:	4906      	ldr	r1, [pc, #24]	; (80018a8 <flameTask_Init+0x78>)
 8001890:	4807      	ldr	r0, [pc, #28]	; (80018b0 <flameTask_Init+0x80>)
 8001892:	f003 fdf6 	bl	8005482 <HAL_UART_Transmit>

	   osDelay(1000);
 8001896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189a:	f004 fa77 	bl	8005d8c <osDelay>
  {
 800189e:	e7d0      	b.n	8001842 <flameTask_Init+0x12>
 80018a0:	200003f0 	.word	0x200003f0
 80018a4:	20000190 	.word	0x20000190
 80018a8:	20000090 	.word	0x20000090
 80018ac:	08008ff4 	.word	0x08008ff4
 80018b0:	2000039c 	.word	0x2000039c
 80018b4:	08009000 	.word	0x08009000

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_MspInit+0x54>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_MspInit+0x54>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x54>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_MspInit+0x54>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_MspInit+0x54>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_MspInit+0x54>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	210f      	movs	r1, #15
 8001906:	f06f 0001 	mvn.w	r0, #1
 800190a:	f001 f876 	bl	80029fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_ADC_MspInit+0x110>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d171      	bne.n	8001a22 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a3a      	ldr	r2, [pc, #232]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a33      	ldr	r2, [pc, #204]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_ADC_MspInit+0x114>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4823      	ldr	r0, [pc, #140]	; (8001a34 <HAL_ADC_MspInit+0x118>)
 80019a6:	f001 fbcf 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019aa:	2302      	movs	r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ae:	2303      	movs	r3, #3
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	481e      	ldr	r0, [pc, #120]	; (8001a38 <HAL_ADC_MspInit+0x11c>)
 80019be:	f001 fbc3 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019c4:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_ADC_MspInit+0x124>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 8001a08:	f001 f82e 	bl	8002a68 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001a12:	f7ff ff51 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_ADC_MspInit+0x120>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	200001d8 	.word	0x200001d8
 8001a40:	40026410 	.word	0x40026410

08001a44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10e      	bne.n	8001a74 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a72:	e026      	b.n	8001ac2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d10e      	bne.n	8001a9c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
}
 8001a9a:	e012      	b.n	8001ac2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x94>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x90>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40000800 	.word	0x40000800

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_TIM_Base_MspInit+0x94>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d133      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_TIM_Base_MspInit+0x98>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b36:	2320      	movs	r3, #32
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b46:	2302      	movs	r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0x9c>)
 8001b52:	f001 faf9 	bl	8003148 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f000 ff4d 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b60:	201d      	movs	r0, #29
 8001b62:	f000 ff66 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020400 	.word	0x40020400

08001b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_TIM_MspPostInit+0xf8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d11f      	bne.n	8001bde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4829      	ldr	r0, [pc, #164]	; (8001c7c <HAL_TIM_MspPostInit+0x100>)
 8001bd8:	f001 fab6 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bdc:	e046      	b.n	8001c6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d11e      	bne.n	8001c26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c04:	2301      	movs	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4817      	ldr	r0, [pc, #92]	; (8001c7c <HAL_TIM_MspPostInit+0x100>)
 8001c20:	f001 fa92 	bl	8003148 <HAL_GPIO_Init>
}
 8001c24:	e022      	b.n	8001c6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <HAL_TIM_MspPostInit+0x104>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d11d      	bne.n	8001c6c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_TIM_MspPostInit+0xfc>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <HAL_TIM_MspPostInit+0x108>)
 8001c68:	f001 fa6e 	bl	8003148 <HAL_GPIO_Init>
}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40020400 	.word	0x40020400

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <HAL_UART_MspInit+0x124>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482d      	ldr	r0, [pc, #180]	; (8001db4 <HAL_UART_MspInit+0x12c>)
 8001cfe:	f001 fa23 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d02:	e04f      	b.n	8001da4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_UART_MspInit+0x130>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d14a      	bne.n	8001da4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_UART_MspInit+0x128>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d72:	2308      	movs	r3, #8
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <HAL_UART_MspInit+0x134>)
 8001d7e:	f001 f9e3 	bl	8003148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d94:	2308      	movs	r3, #8
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0x12c>)
 8001da0:	f001 f9d2 	bl	8003148 <HAL_GPIO_Init>
}
 8001da4:	bf00      	nop
 8001da6:	3730      	adds	r7, #48	; 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f8e2 	bl	8001fb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001df4:	f005 fbd8 	bl	80075a8 <xTaskGetSchedulerState>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001dfe:	f006 f9c3 	bl	8008188 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM3_IRQHandler+0x10>)
 8001e0e:	f002 fa93 	bl	8004338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002c8 	.word	0x200002c8

08001e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA2_Stream0_IRQHandler+0x10>)
 8001e22:	f000 ff27 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001d8 	.word	0x200001d8

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f006 fc0c 	bl	800867c <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20020000 	.word	0x20020000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	200003fc 	.word	0x200003fc
 8001e98:	20004d68 	.word	0x20004d68

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffd7 	bl	8001e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f006 fbcb 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7fe ff35 	bl	8000d60 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f04:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 8001f08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f0c:	20004d64 	.word	0x20004d64

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 fd51 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	200f      	movs	r0, #15
 8001f44:	f000 f808 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fcbc 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fd69 	bl	8002a4e <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 fd31 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20000400 	.word	0x20000400

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000400 	.word	0x20000400

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e033      	b.n	80020be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fc5c 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fa58 	bl	8002548 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
 80020ae:	e001      	b.n	80020b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x1e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0ce      	b.n	8002284 <HAL_ADC_Start_DMA+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d018      	beq.n	800212e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800210c:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_ADC_Start_DMA+0x1c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5f      	ldr	r2, [pc, #380]	; (8002290 <HAL_ADC_Start_DMA+0x1c8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	3b01      	subs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213c:	d107      	bne.n	800214e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	f040 8086 	bne.w	800226a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002188:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d106      	bne.n	80021ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f023 0206 	bic.w	r2, r3, #6
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_ADC_Start_DMA+0x1cc>)
 80021bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	4a35      	ldr	r2, [pc, #212]	; (8002298 <HAL_ADC_Start_DMA+0x1d0>)
 80021c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <HAL_ADC_Start_DMA+0x1d4>)
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <HAL_ADC_Start_DMA+0x1d8>)
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	334c      	adds	r3, #76	; 0x4c
 800220a:	4619      	mov	r1, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f000 fcd8 	bl	8002bc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d129      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	e020      	b.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_ADC_Start_DMA+0x1dc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d11b      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d114      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00b      	b.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	431bde83 	.word	0x431bde83
 8002294:	40012300 	.word	0x40012300
 8002298:	08002741 	.word	0x08002741
 800229c:	080027fb 	.word	0x080027fb
 80022a0:	08002817 	.word	0x08002817
 80022a4:	40012000 	.word	0x40012000

080022a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e113      	b.n	8002528 <HAL_ADC_ConfigChannel+0x244>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d925      	bls.n	800235c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	3b1e      	subs	r3, #30
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	4603      	mov	r3, r0
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4403      	add	r3, r0
 800234e:	3b1e      	subs	r3, #30
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e022      	b.n	80023a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	2207      	movs	r2, #7
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	4603      	mov	r3, r0
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4403      	add	r3, r0
 8002398:	409a      	lsls	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d824      	bhi.n	80023f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b05      	subs	r3, #5
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b05      	subs	r3, #5
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
 80023f2:	e04c      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d824      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	; 0x23
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	400a      	ands	r2, r1
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b23      	subs	r3, #35	; 0x23
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
 8002444:	e023      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b41      	subs	r3, #65	; 0x41
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b41      	subs	r3, #65	; 0x41
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_ADC_ConfigChannel+0x250>)
 8002490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_ADC_ConfigChannel+0x254>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10f      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1d8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d10b      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_ADC_ConfigChannel+0x254>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d12b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_ADC_ConfigChannel+0x258>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x1f4>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d122      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_ADC_ConfigChannel+0x258>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d111      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_ADC_ConfigChannel+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_ADC_ConfigChannel+0x260>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	0c9a      	lsrs	r2, r3, #18
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002510:	e002      	b.n	8002518 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40012300 	.word	0x40012300
 8002538:	40012000 	.word	0x40012000
 800253c:	10000012 	.word	0x10000012
 8002540:	20000000 	.word	0x20000000
 8002544:	431bde83 	.word	0x431bde83

08002548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002550:	4b79      	ldr	r3, [pc, #484]	; (8002738 <ADC_Init+0x1f0>)
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800257c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <ADC_Init+0x1f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d022      	beq.n	8002626 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e00f      	b.n	8002646 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002644:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0202 	bic.w	r2, r2, #2
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
 8002660:	005a      	lsls	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002682:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	3b01      	subs	r3, #1
 80026a0:	035a      	lsls	r2, r3, #13
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	e007      	b.n	80026bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	051a      	lsls	r2, r3, #20
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026fe:	025a      	lsls	r2, r3, #9
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	029a      	lsls	r2, r3, #10
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012300 	.word	0x40012300
 800273c:	0f000001 	.word	0x0f000001

08002740 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002756:	2b00      	cmp	r3, #0
 8002758:	d13c      	bne.n	80027d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d12b      	bne.n	80027cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d127      	bne.n	80027cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0220 	bic.w	r2, r2, #32
 80027a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fd6b 	bl	80022a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027d2:	e00e      	b.n	80027f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fd75 	bl	80022d0 <HAL_ADC_ErrorCallback>
}
 80027e6:	e004      	b.n	80027f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fd57 	bl	80022bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff fd4a 	bl	80022d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff3e 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff8e 	bl	8002938 <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5d 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffa2 	bl	80029a0 <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff fab4 	bl	8001fe0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e099      	b.n	8002bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa4:	e00f      	b.n	8002ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa6:	f7ff fa9b 	bl	8001fe0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d908      	bls.n	8002ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e078      	b.n	8002bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e8      	bne.n	8002aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_DMA_Init+0x158>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d117      	bne.n	8002b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00e      	beq.n	8002b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa6f 	bl	8003050 <DMA_CheckFifoParam>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b86:	2301      	movs	r3, #1
 8002b88:	e016      	b.n	8002bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa26 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	f010803f 	.word	0xf010803f

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_DMA_Start_IT+0x26>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e040      	b.n	8002c6c <HAL_DMA_Start_IT+0xa8>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d12f      	bne.n	8002c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9b8 	bl	8002f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0216 	orr.w	r2, r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c80:	4b8e      	ldr	r3, [pc, #568]	; (8002ebc <HAL_DMA_IRQHandler+0x248>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a8e      	ldr	r2, [pc, #568]	; (8002ec0 <HAL_DMA_IRQHandler+0x24c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0204 	bic.w	r2, r2, #4
 8002cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2208      	movs	r2, #8
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2210      	movs	r2, #16
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d043      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2210      	movs	r2, #16
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	e01f      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0208 	bic.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2220      	movs	r2, #32
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 808f 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8087 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d136      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0216 	bic.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x1da>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0208 	bic.w	r2, r2, #8
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	223f      	movs	r2, #63	; 0x3f
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d07e      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
        }
        return;
 8002e8a:	e079      	b.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d031      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e02c      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e01e      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10f      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0210 	bic.w	r2, r2, #16
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d032      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d307      	bcc.n	8002f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f2      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x2cc>
 8002f5a:	e000      	b.n	8002f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f80:	bf00      	nop
    }
  }
}
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d108      	bne.n	8002fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc6:	e007      	b.n	8002fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b10      	subs	r3, #16
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d909      	bls.n	8003026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58
 8003024:	e007      	b.n	8003036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	aaaaaaab 	.word	0xaaaaaaab
 800304c:	08009084 	.word	0x08009084

08003050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d856      	bhi.n	800311e <DMA_CheckFifoParam+0xce>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <DMA_CheckFifoParam+0x28>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	0800309b 	.word	0x0800309b
 8003080:	08003089 	.word	0x08003089
 8003084:	0800311f 	.word	0x0800311f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d046      	beq.n	8003122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e043      	b.n	8003122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a2:	d140      	bne.n	8003126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e03d      	b.n	8003126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	d121      	bne.n	80030f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d837      	bhi.n	800312a <DMA_CheckFifoParam+0xda>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <DMA_CheckFifoParam+0x70>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	080030e9 	.word	0x080030e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e030      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d025      	beq.n	800312e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e6:	e022      	b.n	800312e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f0:	d11f      	bne.n	8003132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f6:	e01c      	b.n	8003132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d903      	bls.n	8003106 <DMA_CheckFifoParam+0xb6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003104:	e018      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e015      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e00b      	b.n	8003136 <DMA_CheckFifoParam+0xe6>
      break;
 800311e:	bf00      	nop
 8003120:	e00a      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e008      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;   
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
    }
  } 
  
  return status; 
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e159      	b.n	8003418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 8148 	bne.w	8003412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	2b02      	cmp	r3, #2
 8003198:	d130      	bne.n	80031fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0201 	and.w	r2, r3, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d017      	beq.n	8003238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a2 	beq.w	8003412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b54      	ldr	r3, [pc, #336]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ea:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_GPIO_Init+0x2ec>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a49      	ldr	r2, [pc, #292]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d019      	beq.n	800334a <HAL_GPIO_Init+0x202>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a48      	ldr	r2, [pc, #288]	; (800343c <HAL_GPIO_Init+0x2f4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_GPIO_Init+0x1fe>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a47      	ldr	r2, [pc, #284]	; (8003440 <HAL_GPIO_Init+0x2f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00d      	beq.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a46      	ldr	r2, [pc, #280]	; (8003444 <HAL_GPIO_Init+0x2fc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <HAL_GPIO_Init+0x1f6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a45      	ldr	r2, [pc, #276]	; (8003448 <HAL_GPIO_Init+0x300>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_GPIO_Init+0x1f2>
 8003336:	2304      	movs	r3, #4
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x204>
 800333a:	2307      	movs	r3, #7
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x204>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x204>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x204>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x204>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <HAL_GPIO_Init+0x2ec>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_GPIO_Init+0x304>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_GPIO_Init+0x304>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_GPIO_Init+0x304>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <HAL_GPIO_Init+0x304>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033be:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_GPIO_Init+0x304>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e2:	4a1a      	ldr	r2, [pc, #104]	; (800344c <HAL_GPIO_Init+0x304>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_GPIO_Init+0x304>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_GPIO_Init+0x304>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f aea2 	bls.w	8003164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e267      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d075      	beq.n	800358e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d00c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d112      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ba:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c6:	d10b      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	4b7e      	ldr	r3, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05b      	beq.n	800358c <HAL_RCC_OscConfig+0x108>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d157      	bne.n	800358c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e242      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCC_OscConfig+0x74>
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a75      	ldr	r2, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e01d      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x98>
 8003502:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6f      	ldr	r2, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b6d      	ldr	r3, [pc, #436]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6c      	ldr	r2, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 800351c:	4b69      	ldr	r3, [pc, #420]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a68      	ldr	r2, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe fd50 	bl	8001fe0 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe fd4c 	bl	8001fe0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e207      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xc0>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fd3c 	bl	8001fe0 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fd38 	bl	8001fe0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e1f3      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0xe8>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359a:	4b4a      	ldr	r3, [pc, #296]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b2:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x152>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e1c7      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4937      	ldr	r1, [pc, #220]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	e03a      	b.n	8003662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x244>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fe fcf1 	bl	8001fe0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003602:	f7fe fced 	bl	8001fe0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1a8      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4925      	ldr	r1, [pc, #148]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	e015      	b.n	8003662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_OscConfig+0x244>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fcd0 	bl	8001fe0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe fccc 	bl	8001fe0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e187      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d036      	beq.n	80036dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x248>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe fcb0 	bl	8001fe0 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003684:	f7fe fcac 	bl	8001fe0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e167      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x240>)
 8003698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x200>
 80036a2:	e01b      	b.n	80036dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_OscConfig+0x248>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fc99 	bl	8001fe0 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	e00e      	b.n	80036d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fe fc95 	bl	8001fe0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d907      	bls.n	80036d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e150      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	42470000 	.word	0x42470000
 80036cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ea      	bne.n	80036b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8097 	beq.w	8003818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ee:	4b81      	ldr	r3, [pc, #516]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a7c      	ldr	r2, [pc, #496]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b7a      	ldr	r3, [pc, #488]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0x474>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003726:	4b74      	ldr	r3, [pc, #464]	; (80038f8 <HAL_RCC_OscConfig+0x474>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a73      	ldr	r2, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x474>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7fe fc55 	bl	8001fe0 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fe fc51 	bl	8001fe0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e10c      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x474>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x2ea>
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a63      	ldr	r2, [pc, #396]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	e01c      	b.n	80037a8 <HAL_RCC_OscConfig+0x324>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b05      	cmp	r3, #5
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x30c>
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a5e      	ldr	r2, [pc, #376]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 800377c:	f043 0304 	orr.w	r3, r3, #4
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
 8003782:	4b5c      	ldr	r3, [pc, #368]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a5b      	ldr	r2, [pc, #364]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0x324>
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f023 0304 	bic.w	r3, r3, #4
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fe fc16 	bl	8001fe0 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe fc12 	bl	8001fe0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0cb      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ee      	beq.n	80037b8 <HAL_RCC_OscConfig+0x334>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037dc:	f7fe fc00 	bl	8001fe0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7fe fbfc 	bl	8001fe0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e0b5      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ee      	bne.n	80037e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380c:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a1 	beq.w	8003964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003822:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b08      	cmp	r3, #8
 800382c:	d05c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d141      	bne.n	80038ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_OscConfig+0x478>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fbd0 	bl	8001fe0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fbcc 	bl	8001fe0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e087      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	491b      	ldr	r1, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_RCC_OscConfig+0x478>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fe fba5 	bl	8001fe0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389a:	f7fe fba1 	bl	8001fe0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e05c      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x416>
 80038b8:	e054      	b.n	8003964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCC_OscConfig+0x478>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fb8e 	bl	8001fe0 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe fb8a 	bl	8001fe0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_OscConfig+0x470>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x444>
 80038e6:	e03d      	b.n	8003964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e038      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4ec>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d028      	beq.n	8003960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d121      	bne.n	8003960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d11a      	bne.n	8003960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003938:	4293      	cmp	r3, r2
 800393a:	d111      	bne.n	8003960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	3b01      	subs	r3, #1
 800394a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cc      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d90c      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e06f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e067      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4934      	ldr	r1, [pc, #208]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a64:	f7fe fabc 	bl	8001fe0 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe fab8 	bl	8001fe0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 020c 	and.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1eb      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d20c      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 f821 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fa1c 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800906c 	.word	0x0800906c
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b44:	b094      	sub	sp, #80	; 0x50
 8003b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	2300      	movs	r3, #0
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b58:	4b79      	ldr	r3, [pc, #484]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d00d      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x40>
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	f200 80e1 	bhi.w	8003d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x34>
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b72:	e0db      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b78:	e0db      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7a:	4b73      	ldr	r3, [pc, #460]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7e:	e0d8      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b80:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b96:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	099b      	lsrs	r3, r3, #6
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8003baa:	2300      	movs	r3, #0
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
 8003bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	f04f 0000 	mov.w	r0, #0
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	0159      	lsls	r1, r3, #5
 8003bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc4:	0150      	lsls	r0, r2, #5
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4621      	mov	r1, r4
 8003bcc:	1a51      	subs	r1, r2, r1
 8003bce:	6139      	str	r1, [r7, #16]
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be4:	4659      	mov	r1, fp
 8003be6:	018b      	lsls	r3, r1, #6
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bee:	4651      	mov	r1, sl
 8003bf0:	018a      	lsls	r2, r1, #6
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c12:	4690      	mov	r8, r2
 8003c14:	4699      	mov	r9, r3
 8003c16:	4623      	mov	r3, r4
 8003c18:	eb18 0303 	adds.w	r3, r8, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	462b      	mov	r3, r5
 8003c20:	eb49 0303 	adc.w	r3, r9, r3
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c32:	4629      	mov	r1, r5
 8003c34:	024b      	lsls	r3, r1, #9
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	024a      	lsls	r2, r1, #9
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c46:	2200      	movs	r2, #0
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c50:	f7fc ff04 	bl	8000a5c <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5c:	e058      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	2200      	movs	r2, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	4611      	mov	r1, r2
 8003c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	0159      	lsls	r1, r3, #5
 8003c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8a:	0150      	lsls	r0, r2, #5
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4641      	mov	r1, r8
 8003c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	00eb      	lsls	r3, r5, #3
 8003cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc6:	00e2      	lsls	r2, r4, #3
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	4643      	mov	r3, r8
 8003cce:	18e3      	adds	r3, r4, r3
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	eb45 0303 	adc.w	r3, r5, r3
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	028b      	lsls	r3, r1, #10
 8003cea:	4621      	mov	r1, r4
 8003cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	028a      	lsls	r2, r1, #10
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	61fa      	str	r2, [r7, #28]
 8003d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d04:	f7fc feaa 	bl	8000a5c <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3750      	adds	r7, #80	; 0x50
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	007a1200 	.word	0x007a1200

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000000 	.word	0x20000000

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0a9b      	lsrs	r3, r3, #10
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800907c 	.word	0x0800907c

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d90:	f7ff ffdc 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0b5b      	lsrs	r3, r3, #13
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	0800907c 	.word	0x0800907c

08003db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e041      	b.n	8003e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fe7e 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 fe3a 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e041      	b.n	8003ee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fd fde3 	bl	8001a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fdeb 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_TIM_PWM_Start+0x24>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e022      	b.n	8003f5a <HAL_TIM_PWM_Start+0x6a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d109      	bne.n	8003f2e <HAL_TIM_PWM_Start+0x3e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e015      	b.n	8003f5a <HAL_TIM_PWM_Start+0x6a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d109      	bne.n	8003f48 <HAL_TIM_PWM_Start+0x58>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e008      	b.n	8003f5a <HAL_TIM_PWM_Start+0x6a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e068      	b.n	8004034 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_PWM_Start+0x82>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	e013      	b.n	8003f9a <HAL_TIM_PWM_Start+0xaa>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d104      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x92>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	e00b      	b.n	8003f9a <HAL_TIM_PWM_Start+0xaa>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0xa2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	e003      	b.n	8003f9a <HAL_TIM_PWM_Start+0xaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f926 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_TIM_PWM_Start+0x14c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_TIM_PWM_Start+0x14c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x10e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x10e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_TIM_PWM_Start+0x150>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x10e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	; (8004044 <HAL_TIM_PWM_Start+0x154>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x10e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIM_PWM_Start+0x158>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x10e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_TIM_PWM_Start+0x15c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d111      	bne.n	8004022 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b06      	cmp	r3, #6
 800400e:	d010      	beq.n	8004032 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	e007      	b.n	8004032 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40014000 	.word	0x40014000

08004050 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e041      	b.n	80040e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f839 	bl	80040ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 fcec 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <HAL_TIM_IC_Start_IT+0x1e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e013      	b.n	800414a <HAL_TIM_IC_Start_IT+0x46>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d104      	bne.n	8004132 <HAL_TIM_IC_Start_IT+0x2e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800412e:	b2db      	uxtb	r3, r3
 8004130:	e00b      	b.n	800414a <HAL_TIM_IC_Start_IT+0x46>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d104      	bne.n	8004142 <HAL_TIM_IC_Start_IT+0x3e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e003      	b.n	800414a <HAL_TIM_IC_Start_IT+0x46>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_TIM_IC_Start_IT+0x58>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e013      	b.n	8004184 <HAL_TIM_IC_Start_IT+0x80>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d104      	bne.n	800416c <HAL_TIM_IC_Start_IT+0x68>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e00b      	b.n	8004184 <HAL_TIM_IC_Start_IT+0x80>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d104      	bne.n	800417c <HAL_TIM_IC_Start_IT+0x78>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e003      	b.n	8004184 <HAL_TIM_IC_Start_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004182:	b2db      	uxtb	r3, r3
 8004184:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	7bbb      	ldrb	r3, [r7, #14]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800418c:	7b7b      	ldrb	r3, [r7, #13]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0c2      	b.n	800431c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0xa2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e013      	b.n	80041ce <HAL_TIM_IC_Start_IT+0xca>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0xb2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_IC_Start_IT+0xca>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0xc2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	e003      	b.n	80041ce <HAL_TIM_IC_Start_IT+0xca>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_TIM_IC_Start_IT+0xda>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	e013      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x102>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_IC_Start_IT+0xea>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x102>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_IC_Start_IT+0xfa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	e003      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x102>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	d841      	bhi.n	8004290 <HAL_TIM_IC_Start_IT+0x18c>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_TIM_IC_Start_IT+0x110>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004249 	.word	0x08004249
 8004218:	08004291 	.word	0x08004291
 800421c:	08004291 	.word	0x08004291
 8004220:	08004291 	.word	0x08004291
 8004224:	0800425b 	.word	0x0800425b
 8004228:	08004291 	.word	0x08004291
 800422c:	08004291 	.word	0x08004291
 8004230:	08004291 	.word	0x08004291
 8004234:	0800426d 	.word	0x0800426d
 8004238:	08004291 	.word	0x08004291
 800423c:	08004291 	.word	0x08004291
 8004240:	08004291 	.word	0x08004291
 8004244:	0800427f 	.word	0x0800427f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0202 	orr.w	r2, r2, #2
 8004256:	60da      	str	r2, [r3, #12]
      break;
 8004258:	e01d      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0204 	orr.w	r2, r2, #4
 8004268:	60da      	str	r2, [r3, #12]
      break;
 800426a:	e014      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0208 	orr.w	r2, r2, #8
 800427a:	60da      	str	r2, [r3, #12]
      break;
 800427c:	e00b      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0210 	orr.w	r2, r2, #16
 800428c:	60da      	str	r2, [r3, #12]
      break;
 800428e:	e002      	b.n	8004296 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	bf00      	nop
  }

  if (status == HAL_OK)
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d13e      	bne.n	800431a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 ffa5 	bl	80051f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_TIM_IC_Start_IT+0x220>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d013      	beq.n	80042e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_TIM_IC_Start_IT+0x224>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_TIM_IC_Start_IT+0x228>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_IC_Start_IT+0x22c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <HAL_TIM_IC_Start_IT+0x230>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d010      	beq.n	800431a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	e007      	b.n	800431a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800431a:	7bfb      	ldrb	r3, [r7, #15]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000

08004338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b02      	cmp	r3, #2
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0202 	mvn.w	r2, #2
 8004364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd f8b8 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb54 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb5b 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0204 	mvn.w	r2, #4
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f88e 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb2a 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb31 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0208 	mvn.w	r2, #8
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2204      	movs	r2, #4
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd f864 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb00 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb07 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0210 	mvn.w	r2, #16
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2208      	movs	r2, #8
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd f83a 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fad6 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fadd 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0201 	mvn.w	r2, #1
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fab0 	bl	8004a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 ff76 	bl	80053d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 faa2 	bl	8004a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b20      	cmp	r3, #32
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b20      	cmp	r3, #32
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0220 	mvn.w	r2, #32
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 ff40 	bl	80053c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004562:	2302      	movs	r3, #2
 8004564:	e088      	b.n	8004678 <HAL_TIM_IC_ConfigChannel+0x130>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11b      	bne.n	80045ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f000 fc7e 	bl	8004e84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 020c 	bic.w	r2, r2, #12
 8004596:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
 80045aa:	e060      	b.n	800466e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d11c      	bne.n	80045ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f000 fcf6 	bl	8004fb2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	619a      	str	r2, [r3, #24]
 80045ea:	e040      	b.n	800466e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11b      	bne.n	800462a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f000 fd43 	bl	800508c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 020c 	bic.w	r2, r2, #12
 8004614:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	61da      	str	r2, [r3, #28]
 8004628:	e021      	b.n	800466e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d11c      	bne.n	800466a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f000 fd60 	bl	8005104 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004652:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69d9      	ldr	r1, [r3, #28]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	61da      	str	r2, [r3, #28]
 8004668:	e001      	b.n	800466e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800469a:	2302      	movs	r3, #2
 800469c:	e0ae      	b.n	80047fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	f200 809f 	bhi.w	80047ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	080047ed 	.word	0x080047ed
 80046bc:	080047ed 	.word	0x080047ed
 80046c0:	080047ed 	.word	0x080047ed
 80046c4:	08004729 	.word	0x08004729
 80046c8:	080047ed 	.word	0x080047ed
 80046cc:	080047ed 	.word	0x080047ed
 80046d0:	080047ed 	.word	0x080047ed
 80046d4:	0800476b 	.word	0x0800476b
 80046d8:	080047ed 	.word	0x080047ed
 80046dc:	080047ed 	.word	0x080047ed
 80046e0:	080047ed 	.word	0x080047ed
 80046e4:	080047ab 	.word	0x080047ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fa3c 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0208 	orr.w	r2, r2, #8
 8004702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0204 	bic.w	r2, r2, #4
 8004712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6999      	ldr	r1, [r3, #24]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	619a      	str	r2, [r3, #24]
      break;
 8004726:	e064      	b.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fa82 	bl	8004c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6999      	ldr	r1, [r3, #24]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	619a      	str	r2, [r3, #24]
      break;
 8004768:	e043      	b.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 facd 	bl	8004d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0208 	orr.w	r2, r2, #8
 8004784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0204 	bic.w	r2, r2, #4
 8004794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	61da      	str	r2, [r3, #28]
      break;
 80047a8:	e023      	b.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fb17 	bl	8004de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69d9      	ldr	r1, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	021a      	lsls	r2, r3, #8
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	61da      	str	r2, [r3, #28]
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIM_ConfigClockSource+0x1c>
 800481c:	2302      	movs	r3, #2
 800481e:	e0b4      	b.n	800498a <HAL_TIM_ConfigClockSource+0x186>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800483e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d03e      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0xd4>
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485e:	f200 8087 	bhi.w	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	f000 8086 	beq.w	8004976 <HAL_TIM_ConfigClockSource+0x172>
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d87f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b70      	cmp	r3, #112	; 0x70
 8004872:	d01a      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xa6>
 8004874:	2b70      	cmp	r3, #112	; 0x70
 8004876:	d87b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b60      	cmp	r3, #96	; 0x60
 800487a:	d050      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x11a>
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d877      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b50      	cmp	r3, #80	; 0x50
 8004882:	d03c      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xfa>
 8004884:	2b50      	cmp	r3, #80	; 0x50
 8004886:	d873      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d058      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x13a>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d86f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b30      	cmp	r3, #48	; 0x30
 8004892:	d064      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15a>
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d86b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d060      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d867      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15a>
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d05a      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	e062      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f000 fc7b 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	609a      	str	r2, [r3, #8]
      break;
 80048d6:	e04f      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f000 fc64 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fa:	609a      	str	r2, [r3, #8]
      break;
 80048fc:	e03c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	461a      	mov	r2, r3
 800490c:	f000 fb22 	bl	8004f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2150      	movs	r1, #80	; 0x50
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fc31 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 800491c:	e02c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fb7e 	bl	800502c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2160      	movs	r1, #96	; 0x60
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fc21 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 800493c:	e01c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 fb02 	bl	8004f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2140      	movs	r1, #64	; 0x40
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fc11 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 800495c:	e00c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 fc08 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 800496e:	e003      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e000      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d831      	bhi.n	8004a0c <HAL_TIM_ReadCapturedValue+0x78>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	08004a0d 	.word	0x08004a0d
 80049c8:	08004a0d 	.word	0x08004a0d
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a0d 	.word	0x08004a0d
 80049e0:	08004a03 	.word	0x08004a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	60fb      	str	r3, [r7, #12]

      break;
 80049ec:	e00f      	b.n	8004a0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	60fb      	str	r3, [r7, #12]

      break;
 80049f6:	e00a      	b.n	8004a0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	60fb      	str	r3, [r7, #12]

      break;
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	60fb      	str	r3, [r7, #12]

      break;
 8004a0a:	e000      	b.n	8004a0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a0c:	bf00      	nop
  }

  return tmpreg;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <TIM_Base_SetConfig+0xf4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <TIM_Base_SetConfig+0xf8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <TIM_Base_SetConfig+0xfc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d103      	bne.n	8004b3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	615a      	str	r2, [r3, #20]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0308 	bic.w	r3, r3, #8
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010000 	.word	0x40010000

08004c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d113      	bne.n	8004ce4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000

08004d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <TIM_OC4_SetConfig+0x9c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000

08004e84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <TIM_TI1_SetConfig+0xbc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d00f      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <TIM_TI1_SetConfig+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <TIM_TI1_SetConfig+0xc4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <TIM_TI1_SetConfig+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <TIM_TI1_SetConfig+0xcc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <TIM_TI1_SetConfig+0x5a>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <TIM_TI1_SetConfig+0x5c>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e003      	b.n	8004efe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f023 030a 	bic.w	r3, r3, #10
 8004f18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 030a 	and.w	r3, r3, #10
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000

08004f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 030a 	bic.w	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005004:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f023 0210 	bic.w	r2, r3, #16
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005056:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	031b      	lsls	r3, r3, #12
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005068:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	621a      	str	r2, [r3, #32]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 0303 	bic.w	r3, r3, #3
 80050b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005142:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	b29b      	uxth	r3, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005156:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	031b      	lsls	r3, r3, #12
 800515c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e050      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d013      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40014000 	.word	0x40014000

0800531c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e03d      	b.n	80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e03f      	b.n	800547a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc fc3a 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f929 	bl	8005684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b08a      	sub	sp, #40	; 0x28
 8005486:	af02      	add	r7, sp, #8
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d17c      	bne.n	800559c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_UART_Transmit+0x2c>
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e075      	b.n	800559e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_UART_Transmit+0x3e>
 80054bc:	2302      	movs	r3, #2
 80054be:	e06e      	b.n	800559e <HAL_UART_Transmit+0x11c>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2221      	movs	r2, #33	; 0x21
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d6:	f7fc fd83 	bl	8001fe0 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_UART_Transmit+0x82>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005514:	e02a      	b.n	800556c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f840 	bl	80055a6 <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e036      	b.n	800559e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3302      	adds	r3, #2
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e007      	b.n	800555e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1cf      	bne.n	8005516 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	2140      	movs	r1, #64	; 0x40
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f810 	bl	80055a6 <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e006      	b.n	800559e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b090      	sub	sp, #64	; 0x40
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b6:	e050      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d04c      	beq.n	800565a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055c6:	f7fc fd0b 	bl	8001fe0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d241      	bcs.n	800565a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055f6:	637a      	str	r2, [r7, #52]	; 0x34
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	613b      	str	r3, [r7, #16]
   return(result);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562a:	623a      	str	r2, [r7, #32]
 800562c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	69f9      	ldr	r1, [r7, #28]
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	61bb      	str	r3, [r7, #24]
   return(result);
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e00f      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	429a      	cmp	r2, r3
 8005676:	d09f      	beq.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3740      	adds	r7, #64	; 0x40
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b0c0      	sub	sp, #256	; 0x100
 800568a:	af00      	add	r7, sp, #0
 800568c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	68d9      	ldr	r1, [r3, #12]
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	ea40 0301 	orr.w	r3, r0, r1
 80056ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056dc:	f021 010c 	bic.w	r1, r1, #12
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ea:	430b      	orrs	r3, r1
 80056ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fe:	6999      	ldr	r1, [r3, #24]
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	ea40 0301 	orr.w	r3, r0, r1
 800570a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b8f      	ldr	r3, [pc, #572]	; (8005950 <UART_SetConfig+0x2cc>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d005      	beq.n	8005724 <UART_SetConfig+0xa0>
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b8d      	ldr	r3, [pc, #564]	; (8005954 <UART_SetConfig+0x2d0>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d104      	bne.n	800572e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7fe fb32 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8005728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800572c:	e003      	b.n	8005736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800572e:	f7fe fb19 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8005732:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	f040 810c 	bne.w	800595c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800574e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005756:	4622      	mov	r2, r4
 8005758:	462b      	mov	r3, r5
 800575a:	1891      	adds	r1, r2, r2
 800575c:	65b9      	str	r1, [r7, #88]	; 0x58
 800575e:	415b      	adcs	r3, r3
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005766:	4621      	mov	r1, r4
 8005768:	eb12 0801 	adds.w	r8, r2, r1
 800576c:	4629      	mov	r1, r5
 800576e:	eb43 0901 	adc.w	r9, r3, r1
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800577e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005786:	4690      	mov	r8, r2
 8005788:	4699      	mov	r9, r3
 800578a:	4623      	mov	r3, r4
 800578c:	eb18 0303 	adds.w	r3, r8, r3
 8005790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005794:	462b      	mov	r3, r5
 8005796:	eb49 0303 	adc.w	r3, r9, r3
 800579a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057b2:	460b      	mov	r3, r1
 80057b4:	18db      	adds	r3, r3, r3
 80057b6:	653b      	str	r3, [r7, #80]	; 0x50
 80057b8:	4613      	mov	r3, r2
 80057ba:	eb42 0303 	adc.w	r3, r2, r3
 80057be:	657b      	str	r3, [r7, #84]	; 0x54
 80057c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057c8:	f7fb f948 	bl	8000a5c <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b61      	ldr	r3, [pc, #388]	; (8005958 <UART_SetConfig+0x2d4>)
 80057d2:	fba3 2302 	umull	r2, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	011c      	lsls	r4, r3, #4
 80057da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	1891      	adds	r1, r2, r2
 80057f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80057f4:	415b      	adcs	r3, r3
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057fc:	4641      	mov	r1, r8
 80057fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005802:	4649      	mov	r1, r9
 8005804:	eb43 0b01 	adc.w	fp, r3, r1
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800581c:	4692      	mov	sl, r2
 800581e:	469b      	mov	fp, r3
 8005820:	4643      	mov	r3, r8
 8005822:	eb1a 0303 	adds.w	r3, sl, r3
 8005826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800582a:	464b      	mov	r3, r9
 800582c:	eb4b 0303 	adc.w	r3, fp, r3
 8005830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005840:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005848:	460b      	mov	r3, r1
 800584a:	18db      	adds	r3, r3, r3
 800584c:	643b      	str	r3, [r7, #64]	; 0x40
 800584e:	4613      	mov	r3, r2
 8005850:	eb42 0303 	adc.w	r3, r2, r3
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800585a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800585e:	f7fb f8fd 	bl	8000a5c <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4611      	mov	r1, r2
 8005868:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <UART_SetConfig+0x2d4>)
 800586a:	fba3 2301 	umull	r2, r3, r3, r1
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2264      	movs	r2, #100	; 0x64
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	1acb      	subs	r3, r1, r3
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <UART_SetConfig+0x2d4>)
 8005880:	fba3 2302 	umull	r2, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800588c:	441c      	add	r4, r3
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005892:	2200      	movs	r2, #0
 8005894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800589c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058a8:	415b      	adcs	r3, r3
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058b0:	4641      	mov	r1, r8
 80058b2:	1851      	adds	r1, r2, r1
 80058b4:	6339      	str	r1, [r7, #48]	; 0x30
 80058b6:	4649      	mov	r1, r9
 80058b8:	414b      	adcs	r3, r1
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058c8:	4659      	mov	r1, fp
 80058ca:	00cb      	lsls	r3, r1, #3
 80058cc:	4651      	mov	r1, sl
 80058ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d2:	4651      	mov	r1, sl
 80058d4:	00ca      	lsls	r2, r1, #3
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	4603      	mov	r3, r0
 80058dc:	4642      	mov	r2, r8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	464b      	mov	r3, r9
 80058e6:	460a      	mov	r2, r1
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005904:	460b      	mov	r3, r1
 8005906:	18db      	adds	r3, r3, r3
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
 800590a:	4613      	mov	r3, r2
 800590c:	eb42 0303 	adc.w	r3, r2, r3
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800591a:	f7fb f89f 	bl	8000a5c <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <UART_SetConfig+0x2d4>)
 8005924:	fba3 1302 	umull	r1, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	2164      	movs	r1, #100	; 0x64
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	3332      	adds	r3, #50	; 0x32
 8005936:	4a08      	ldr	r2, [pc, #32]	; (8005958 <UART_SetConfig+0x2d4>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	f003 0207 	and.w	r2, r3, #7
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4422      	add	r2, r4
 800594a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800594c:	e105      	b.n	8005b5a <UART_SetConfig+0x4d6>
 800594e:	bf00      	nop
 8005950:	40011000 	.word	0x40011000
 8005954:	40011400 	.word	0x40011400
 8005958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005960:	2200      	movs	r2, #0
 8005962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005966:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800596a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	1891      	adds	r1, r2, r2
 8005974:	6239      	str	r1, [r7, #32]
 8005976:	415b      	adcs	r3, r3
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	4641      	mov	r1, r8
 8005980:	1854      	adds	r4, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0501 	adc.w	r5, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059a4:	464b      	mov	r3, r9
 80059a6:	eb45 0303 	adc.w	r3, r5, r3
 80059aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059ca:	4629      	mov	r1, r5
 80059cc:	008b      	lsls	r3, r1, #2
 80059ce:	4621      	mov	r1, r4
 80059d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d4:	4621      	mov	r1, r4
 80059d6:	008a      	lsls	r2, r1, #2
 80059d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059dc:	f7fb f83e 	bl	8000a5c <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b60      	ldr	r3, [pc, #384]	; (8005b68 <UART_SetConfig+0x4e4>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	61b9      	str	r1, [r7, #24]
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6139      	str	r1, [r7, #16]
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a68:	4649      	mov	r1, r9
 8005a6a:	008b      	lsls	r3, r1, #2
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a72:	4641      	mov	r1, r8
 8005a74:	008a      	lsls	r2, r1, #2
 8005a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a7a:	f7fa ffef 	bl	8000a5c <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	; 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	3332      	adds	r3, #50	; 0x32
 8005a96:	4a34      	ldr	r2, [pc, #208]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa2:	441c      	add	r4, r3
 8005aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8005aac:	677a      	str	r2, [r7, #116]	; 0x74
 8005aae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ab2:	4642      	mov	r2, r8
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	1891      	adds	r1, r2, r2
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	415b      	adcs	r3, r3
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	1851      	adds	r1, r2, r1
 8005ac6:	6039      	str	r1, [r7, #0]
 8005ac8:	4649      	mov	r1, r9
 8005aca:	414b      	adcs	r3, r1
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ada:	4659      	mov	r1, fp
 8005adc:	00cb      	lsls	r3, r1, #3
 8005ade:	4651      	mov	r1, sl
 8005ae0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	00ca      	lsls	r2, r1, #3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4619      	mov	r1, r3
 8005aec:	4603      	mov	r3, r0
 8005aee:	4642      	mov	r2, r8
 8005af0:	189b      	adds	r3, r3, r2
 8005af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005af4:	464b      	mov	r3, r9
 8005af6:	460a      	mov	r2, r1
 8005af8:	eb42 0303 	adc.w	r3, r2, r3
 8005afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	663b      	str	r3, [r7, #96]	; 0x60
 8005b08:	667a      	str	r2, [r7, #100]	; 0x64
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b16:	4649      	mov	r1, r9
 8005b18:	008b      	lsls	r3, r1, #2
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b20:	4641      	mov	r1, r8
 8005b22:	008a      	lsls	r2, r1, #2
 8005b24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b28:	f7fa ff98 	bl	8000a5c <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005b32:	fba3 1302 	umull	r1, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	2164      	movs	r1, #100	; 0x64
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	3332      	adds	r3, #50	; 0x32
 8005b44:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4422      	add	r2, r4
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b60:	46bd      	mov	sp, r7
 8005b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b66:	bf00      	nop
 8005b68:	51eb851f 	.word	0x51eb851f

08005b6c <__NVIC_SetPriority>:
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	6039      	str	r1, [r7, #0]
 8005b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db0a      	blt.n	8005b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <__NVIC_SetPriority+0x4c>)
 8005b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b94:	e00a      	b.n	8005bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4908      	ldr	r1, [pc, #32]	; (8005bbc <__NVIC_SetPriority+0x50>)
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	0112      	lsls	r2, r2, #4
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	440b      	add	r3, r1
 8005baa:	761a      	strb	r2, [r3, #24]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000e100 	.word	0xe000e100
 8005bbc:	e000ed00 	.word	0xe000ed00

08005bc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	f06f 0004 	mvn.w	r0, #4
 8005bca:	f7ff ffcf 	bl	8005b6c <__NVIC_SetPriority>
#endif
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bda:	f3ef 8305 	mrs	r3, IPSR
 8005bde:	603b      	str	r3, [r7, #0]
  return(result);
 8005be0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005be6:	f06f 0305 	mvn.w	r3, #5
 8005bea:	607b      	str	r3, [r7, #4]
 8005bec:	e00c      	b.n	8005c08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <osKernelInitialize+0x44>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <osKernelInitialize+0x44>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	e002      	b.n	8005c08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c08:	687b      	ldr	r3, [r7, #4]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000404 	.word	0x20000404

08005c1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c22:	f3ef 8305 	mrs	r3, IPSR
 8005c26:	603b      	str	r3, [r7, #0]
  return(result);
 8005c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c2e:	f06f 0305 	mvn.w	r3, #5
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	e010      	b.n	8005c58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <osKernelStart+0x48>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d109      	bne.n	8005c52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c3e:	f7ff ffbf 	bl	8005bc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <osKernelStart+0x48>)
 8005c44:	2202      	movs	r2, #2
 8005c46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c48:	f001 f866 	bl	8006d18 <vTaskStartScheduler>
      stat = osOK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	e002      	b.n	8005c58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c58:	687b      	ldr	r3, [r7, #4]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000404 	.word	0x20000404

08005c68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c78:	f3ef 8305 	mrs	r3, IPSR
 8005c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d17e      	bne.n	8005d82 <osThreadNew+0x11a>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d07b      	beq.n	8005d82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c8e:	2318      	movs	r3, #24
 8005c90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d045      	beq.n	8005d2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <osThreadNew+0x48>
        name = attr->name;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <osThreadNew+0x6e>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b38      	cmp	r3, #56	; 0x38
 8005cc8:	d805      	bhi.n	8005cd6 <osThreadNew+0x6e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <osThreadNew+0x72>
        return (NULL);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e054      	b.n	8005d84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00e      	beq.n	8005d10 <osThreadNew+0xa8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b5b      	cmp	r3, #91	; 0x5b
 8005cf8:	d90a      	bls.n	8005d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <osThreadNew+0xa8>
        mem = 1;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e010      	b.n	8005d32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <osThreadNew+0xca>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <osThreadNew+0xca>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <osThreadNew+0xca>
          mem = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e001      	b.n	8005d32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d110      	bne.n	8005d5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d40:	9202      	str	r2, [sp, #8]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fe0c 	bl	800696c <xTaskCreateStatic>
 8005d54:	4603      	mov	r3, r0
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e013      	b.n	8005d82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d110      	bne.n	8005d82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fe57 	bl	8006a26 <xTaskCreate>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <osThreadNew+0x11a>
            hTask = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d82:	693b      	ldr	r3, [r7, #16]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3728      	adds	r7, #40	; 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d94:	f3ef 8305 	mrs	r3, IPSR
 8005d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <osDelay+0x1c>
    stat = osErrorISR;
 8005da0:	f06f 0305 	mvn.w	r3, #5
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e007      	b.n	8005db8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 ff7c 	bl	8006cb0 <vTaskDelay>
    }
  }

  return (stat);
 8005db8:	68fb      	ldr	r3, [r7, #12]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4a06      	ldr	r2, [pc, #24]	; (8005df4 <vApplicationGetIdleTaskMemory+0x30>)
 8005dda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000408 	.word	0x20000408
 8005df4:	20000464 	.word	0x20000464

08005df8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a06      	ldr	r2, [pc, #24]	; (8005e28 <vApplicationGetTimerTaskMemory+0x30>)
 8005e0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000664 	.word	0x20000664
 8005e28:	200006c0 	.word	0x200006c0

08005e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f103 0208 	add.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0208 	add.w	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f103 0208 	add.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d103      	bne.n	8005eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e00c      	b.n	8005f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e002      	b.n	8005efc <vListInsert+0x2e>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d2f6      	bcs.n	8005ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6892      	ldr	r2, [r2, #8]
 8005f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6852      	ldr	r2, [r2, #4]
 8005f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d103      	bne.n	8005f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	1e5a      	subs	r2, r3, #1
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fbe:	f002 f851 	bl	8008064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	441a      	add	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	441a      	add	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	22ff      	movs	r2, #255	; 0xff
 8006002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	22ff      	movs	r2, #255	; 0xff
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d114      	bne.n	800603e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01a      	beq.n	8006052 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3310      	adds	r3, #16
 8006020:	4618      	mov	r0, r3
 8006022:	f001 f903 	bl	800722c <xTaskRemoveFromEventList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <xQueueGenericReset+0xcc>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	e009      	b.n	8006052 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3310      	adds	r3, #16
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fef2 	bl	8005e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff feed 	bl	8005e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006052:	f002 f837 	bl	80080c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006056:	2301      	movs	r3, #1
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08e      	sub	sp, #56	; 0x38
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <xQueueGenericCreateStatic+0x52>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <xQueueGenericCreateStatic+0x56>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x58>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <xQueueGenericCreateStatic+0x7e>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <xQueueGenericCreateStatic+0x82>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <xQueueGenericCreateStatic+0x84>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	61fb      	str	r3, [r7, #28]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006102:	2350      	movs	r3, #80	; 0x50
 8006104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d00a      	beq.n	8006122 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61bb      	str	r3, [r7, #24]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006122:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006136:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f805 	bl	8006154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800614c:	4618      	mov	r0, r3
 800614e:	3730      	adds	r7, #48	; 0x30
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e002      	b.n	8006176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006182:	2101      	movs	r1, #1
 8006184:	69b8      	ldr	r0, [r7, #24]
 8006186:	f7ff ff05 	bl	8005f94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSend+0x32>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <xQueueGenericSend+0x40>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueGenericSend+0x44>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueGenericSend+0x46>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueGenericSend+0x60>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d103      	bne.n	800620a <xQueueGenericSend+0x6e>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <xQueueGenericSend+0x72>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericSend+0x74>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericSend+0x8e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622a:	f001 f9bd 	bl	80075a8 <xTaskGetSchedulerState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <xQueueGenericSend+0x9e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <xQueueGenericSend+0xa2>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueGenericSend+0xa4>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSend+0xbe>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61fb      	str	r3, [r7, #28]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f001 ff03 	bl	8008064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <xQueueGenericSend+0xd4>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d129      	bne.n	80062c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006276:	f000 fa0b 	bl	8006690 <prvCopyDataToQueue>
 800627a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ffcf 	bl	800722c <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	e00a      	b.n	80062bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <xQueueGenericSend+0x1f8>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062bc:	f001 ff02 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e063      	b.n	800638c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ca:	f001 fefb 	bl	80080c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e05c      	b.n	800638c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f809 	bl	80072f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e6:	f001 feed 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ea:	f000 fd7b 	bl	8006de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ee:	f001 feb9 	bl	8008064 <vPortEnterCritical>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d103      	bne.n	8006308 <xQueueGenericSend+0x16c>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630e:	b25b      	sxtb	r3, r3
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d103      	bne.n	800631e <xQueueGenericSend+0x182>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631e:	f001 fed1 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006322:	1d3a      	adds	r2, r7, #4
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fff8 	bl	8007320 <xTaskCheckForTimeOut>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d124      	bne.n	8006380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006338:	f000 faa2 	bl	8006880 <prvIsQueueFull>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d018      	beq.n	8006374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3310      	adds	r3, #16
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 ff1e 	bl	800718c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006352:	f000 fa2d 	bl	80067b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006356:	f000 fd53 	bl	8006e00 <xTaskResumeAll>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f af7c 	bne.w	800625a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e772      	b.n	800625a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006376:	f000 fa1b 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800637a:	f000 fd41 	bl	8006e00 <xTaskResumeAll>
 800637e:	e76c      	b.n	800625a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006382:	f000 fa15 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006386:	f000 fd3b 	bl	8006e00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800638c:	4618      	mov	r0, r3
 800638e:	3738      	adds	r7, #56	; 0x38
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b090      	sub	sp, #64	; 0x40
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d103      	bne.n	80063d4 <xQueueGenericSendFromISR+0x3c>
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <xQueueGenericSendFromISR+0x40>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <xQueueGenericSendFromISR+0x42>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d103      	bne.n	8006402 <xQueueGenericSendFromISR+0x6a>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <xQueueGenericSendFromISR+0x6e>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <xQueueGenericSendFromISR+0x70>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006422:	f001 ff01 	bl	8008228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006426:	f3ef 8211 	mrs	r2, BASEPRI
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fa      	str	r2, [r7, #28]
 800643c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <xQueueGenericSendFromISR+0xbc>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d12f      	bne.n	80064b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800646a:	f000 f911 	bl	8006690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800646e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d112      	bne.n	800649e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	3324      	adds	r3, #36	; 0x24
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fed1 	bl	800722c <xTaskRemoveFromEventList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e007      	b.n	80064ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800649e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064a2:	3301      	adds	r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	b25a      	sxtb	r2, r3
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064ae:	2301      	movs	r3, #1
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064b2:	e001      	b.n	80064b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3740      	adds	r7, #64	; 0x40
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	; 0x30
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064dc:	2300      	movs	r3, #0
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <xQueueReceive+0x30>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	623b      	str	r3, [r7, #32]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <xQueueReceive+0x3e>
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <xQueueReceive+0x42>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <xQueueReceive+0x44>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xQueueReceive+0x5e>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	61fb      	str	r3, [r7, #28]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652e:	f001 f83b 	bl	80075a8 <xTaskGetSchedulerState>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <xQueueReceive+0x6e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <xQueueReceive+0x72>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <xQueueReceive+0x74>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xQueueReceive+0x8e>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	61bb      	str	r3, [r7, #24]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655e:	f001 fd81 	bl	8008064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01f      	beq.n	80065ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	f000 f8f7 	bl	8006764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00f      	beq.n	80065a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fe4e 	bl	800722c <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006596:	4b3d      	ldr	r3, [pc, #244]	; (800668c <xQueueReceive+0x1bc>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065a6:	f001 fd8d 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e069      	b.n	8006682 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b4:	f001 fd86 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e062      	b.n	8006682 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c2:	f107 0310 	add.w	r3, r7, #16
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fe94 	bl	80072f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d0:	f001 fd78 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d4:	f000 fc06 	bl	8006de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d8:	f001 fd44 	bl	8008064 <vPortEnterCritical>
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d103      	bne.n	80065f2 <xQueueReceive+0x122>
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d103      	bne.n	8006608 <xQueueReceive+0x138>
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006608:	f001 fd5c 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800660c:	1d3a      	adds	r2, r7, #4
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fe83 	bl	8007320 <xTaskCheckForTimeOut>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d123      	bne.n	8006668 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006622:	f000 f917 	bl	8006854 <prvIsQueueEmpty>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	3324      	adds	r3, #36	; 0x24
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fda9 	bl	800718c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800663a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663c:	f000 f8b8 	bl	80067b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006640:	f000 fbde 	bl	8006e00 <xTaskResumeAll>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d189      	bne.n	800655e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <xQueueReceive+0x1bc>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	e780      	b.n	800655e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800665c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665e:	f000 f8a7 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006662:	f000 fbcd 	bl	8006e00 <xTaskResumeAll>
 8006666:	e77a      	b.n	800655e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666a:	f000 f8a1 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666e:	f000 fbc7 	bl	8006e00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006674:	f000 f8ee 	bl	8006854 <prvIsQueueEmpty>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	f43f af6f 	beq.w	800655e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006682:	4618      	mov	r0, r3
 8006684:	3730      	adds	r7, #48	; 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d14d      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 ff92 	bl	80075e4 <xTaskPriorityDisinherit>
 80066c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	e043      	b.n	8006752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d119      	bne.n	8006704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6858      	ldr	r0, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	f001 fff8 	bl	80086d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	441a      	add	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d32b      	bcc.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	e026      	b.n	8006752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68d8      	ldr	r0, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	461a      	mov	r2, r3
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	f001 ffde 	bl	80086d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	425b      	negs	r3, r3
 800671e:	441a      	add	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d207      	bcs.n	8006740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	425b      	negs	r3, r3
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d105      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3b01      	subs	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800675a:	697b      	ldr	r3, [r7, #20]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d018      	beq.n	80067a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d303      	bcc.n	8006798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68d9      	ldr	r1, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	6838      	ldr	r0, [r7, #0]
 80067a4:	f001 ff94 	bl	80086d0 <memcpy>
	}
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b8:	f001 fc54 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c4:	e011      	b.n	80067ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fd2a 	bl	800722c <xTaskRemoveFromEventList>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067de:	f000 fe01 	bl	80073e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dce9      	bgt.n	80067c6 <prvUnlockQueue+0x16>
 80067f2:	e000      	b.n	80067f6 <prvUnlockQueue+0x46>
					break;
 80067f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	22ff      	movs	r2, #255	; 0xff
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067fe:	f001 fc61 	bl	80080c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006802:	f001 fc2f 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680e:	e011      	b.n	8006834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d012      	beq.n	800683e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3310      	adds	r3, #16
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fd05 	bl	800722c <xTaskRemoveFromEventList>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006828:	f000 fddc 	bl	80073e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	3b01      	subs	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dce9      	bgt.n	8006810 <prvUnlockQueue+0x60>
 800683c:	e000      	b.n	8006840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006848:	f001 fc3c 	bl	80080c4 <vPortExitCritical>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685c:	f001 fc02 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e001      	b.n	8006872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006872:	f001 fc27 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006888:	f001 fbec 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e001      	b.n	80068a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068a2:	f001 fc0f 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e014      	b.n	80068ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068cc:	490c      	ldr	r1, [pc, #48]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068d6:	4a0a      	ldr	r2, [pc, #40]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068e2:	e006      	b.n	80068f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	d9e7      	bls.n	80068c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000ac0 	.word	0x20000ac0

08006904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006914:	f001 fba6 	bl	8008064 <vPortEnterCritical>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691e:	b25b      	sxtb	r3, r3
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d103      	bne.n	800692e <vQueueWaitForMessageRestricted+0x2a>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006934:	b25b      	sxtb	r3, r3
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d103      	bne.n	8006944 <vQueueWaitForMessageRestricted+0x40>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006944:	f001 fbbe 	bl	80080c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3324      	adds	r3, #36	; 0x24
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fc3b 	bl	80071d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f7ff ff26 	bl	80067b0 <prvUnlockQueue>
	}
 8006964:	bf00      	nop
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af04      	add	r7, sp, #16
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	623b      	str	r3, [r7, #32]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	61fb      	str	r3, [r7, #28]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b2:	235c      	movs	r3, #92	; 0x5c
 80069b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b5c      	cmp	r3, #92	; 0x5c
 80069ba:	d00a      	beq.n	80069d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01e      	beq.n	8006a18 <xTaskCreateStatic+0xac>
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01b      	beq.n	8006a18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069f2:	2300      	movs	r3, #0
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	f107 0314 	add.w	r3, r7, #20
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f850 	bl	8006ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a12:	f000 f8dd 	bl	8006bd0 <prvAddNewTaskToReadyList>
 8006a16:	e001      	b.n	8006a1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a1c:	697b      	ldr	r3, [r7, #20]
	}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3728      	adds	r7, #40	; 0x28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b08c      	sub	sp, #48	; 0x30
 8006a2a:	af04      	add	r7, sp, #16
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 fc34 	bl	80082a8 <pvPortMalloc>
 8006a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a48:	205c      	movs	r0, #92	; 0x5c
 8006a4a:	f001 fc2d 	bl	80082a8 <pvPortMalloc>
 8006a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5c:	e005      	b.n	8006a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a5e:	6978      	ldr	r0, [r7, #20]
 8006a60:	f001 fcee 	bl	8008440 <vPortFree>
 8006a64:	e001      	b.n	8006a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f80e 	bl	8006ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a94:	69f8      	ldr	r0, [r7, #28]
 8006a96:	f000 f89b 	bl	8006bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e002      	b.n	8006aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	21a5      	movs	r1, #165	; 0xa5
 8006aca:	f001 fe0f 	bl	80086ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	617b      	str	r3, [r7, #20]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01f      	beq.n	8006b4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e012      	b.n	8006b3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	7819      	ldrb	r1, [r3, #0]
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	3334      	adds	r3, #52	; 0x34
 8006b24:	460a      	mov	r2, r1
 8006b26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d006      	beq.n	8006b42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d9e9      	bls.n	8006b14 <prvInitialiseNewTask+0x64>
 8006b40:	e000      	b.n	8006b44 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b4c:	e003      	b.n	8006b56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	2b37      	cmp	r3, #55	; 0x37
 8006b5a:	d901      	bls.n	8006b60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b5c:	2337      	movs	r3, #55	; 0x37
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	2200      	movs	r2, #0
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	3304      	adds	r3, #4
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff f978 	bl	8005e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff f973 	bl	8005e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	69b8      	ldr	r0, [r7, #24]
 8006bb0:	f001 f928 	bl	8007e04 <pxPortInitialiseStack>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bd8:	f001 fa44 	bl	8008064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006be6:	4b2c      	ldr	r3, [pc, #176]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bee:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d110      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bfc:	f000 fc16 	bl	800742c <prvInitialiseTaskLists>
 8006c00:	e00d      	b.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <prvAddNewTaskToReadyList+0xcc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d802      	bhi.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c18:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <prvAddNewTaskToReadyList+0xd4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d903      	bls.n	8006c44 <prvAddNewTaskToReadyList+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <prvAddNewTaskToReadyList+0xd4>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvAddNewTaskToReadyList+0xd8>)
 8006c52:	441a      	add	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7ff f913 	bl	8005e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c60:	f001 fa30 	bl	80080c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <prvAddNewTaskToReadyList+0xcc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d207      	bcs.n	8006c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <prvAddNewTaskToReadyList+0xdc>)
 8006c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000fd4 	.word	0x20000fd4
 8006c98:	20000b00 	.word	0x20000b00
 8006c9c:	20000fe0 	.word	0x20000fe0
 8006ca0:	20000ff0 	.word	0x20000ff0
 8006ca4:	20000fdc 	.word	0x20000fdc
 8006ca8:	20000b04 	.word	0x20000b04
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <vTaskDelay+0x60>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <vTaskDelay+0x30>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	60bb      	str	r3, [r7, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ce0:	f000 f880 	bl	8006de4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcea 	bl	80076c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cec:	f000 f888 	bl	8006e00 <xTaskResumeAll>
 8006cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d107      	bne.n	8006d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <vTaskDelay+0x64>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000ffc 	.word	0x20000ffc
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d26:	463a      	mov	r2, r7
 8006d28:	1d39      	adds	r1, r7, #4
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff f848 	bl	8005dc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	9202      	str	r2, [sp, #8]
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	460a      	mov	r2, r1
 8006d46:	4921      	ldr	r1, [pc, #132]	; (8006dcc <vTaskStartScheduler+0xb4>)
 8006d48:	4821      	ldr	r0, [pc, #132]	; (8006dd0 <vTaskStartScheduler+0xb8>)
 8006d4a:	f7ff fe0f 	bl	800696c <xTaskCreateStatic>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a20      	ldr	r2, [pc, #128]	; (8006dd4 <vTaskStartScheduler+0xbc>)
 8006d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d54:	4b1f      	ldr	r3, [pc, #124]	; (8006dd4 <vTaskStartScheduler+0xbc>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e001      	b.n	8006d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d102      	bne.n	8006d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d6c:	f000 fcfc 	bl	8007768 <xTimerCreateTimerTask>
 8006d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d116      	bne.n	8006da6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	613b      	str	r3, [r7, #16]
}
 8006d8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <vTaskStartScheduler+0xc0>)
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <vTaskStartScheduler+0xc4>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d9a:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <vTaskStartScheduler+0xc8>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006da0:	f001 f8be 	bl	8007f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006da4:	e00e      	b.n	8006dc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d10a      	bne.n	8006dc4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <vTaskStartScheduler+0xaa>
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0800900c 	.word	0x0800900c
 8006dd0:	080073fd 	.word	0x080073fd
 8006dd4:	20000ff8 	.word	0x20000ff8
 8006dd8:	20000ff4 	.word	0x20000ff4
 8006ddc:	20000fe0 	.word	0x20000fe0
 8006de0:	20000fd8 	.word	0x20000fd8

08006de4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <vTaskSuspendAll+0x18>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	4a03      	ldr	r2, [pc, #12]	; (8006dfc <vTaskSuspendAll+0x18>)
 8006df0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006df2:	bf00      	nop
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000ffc 	.word	0x20000ffc

08006e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e0e:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <xTaskResumeAll+0x118>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	603b      	str	r3, [r7, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e2c:	f001 f91a 	bl	8008064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <xTaskResumeAll+0x118>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4a38      	ldr	r2, [pc, #224]	; (8006f18 <xTaskResumeAll+0x118>)
 8006e38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3a:	4b37      	ldr	r3, [pc, #220]	; (8006f18 <xTaskResumeAll+0x118>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d162      	bne.n	8006f08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e42:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <xTaskResumeAll+0x11c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d05e      	beq.n	8006f08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e4a:	e02f      	b.n	8006eac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4c:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <xTaskResumeAll+0x120>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3318      	adds	r3, #24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f871 	bl	8005f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff f86c 	bl	8005f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <xTaskResumeAll+0x124>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <xTaskResumeAll+0x7c>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <xTaskResumeAll+0x124>)
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <xTaskResumeAll+0x128>)
 8006e8a:	441a      	add	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f7fe fff7 	bl	8005e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <xTaskResumeAll+0x12c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d302      	bcc.n	8006eac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ea6:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <xTaskResumeAll+0x130>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eac:	4b1c      	ldr	r3, [pc, #112]	; (8006f20 <xTaskResumeAll+0x120>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1cb      	bne.n	8006e4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eba:	f000 fb55 	bl	8007568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ebe:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <xTaskResumeAll+0x134>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d010      	beq.n	8006eec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eca:	f000 f847 	bl	8006f5c <xTaskIncrementTick>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ed4:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <xTaskResumeAll+0x130>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f1      	bne.n	8006eca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <xTaskResumeAll+0x134>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xTaskResumeAll+0x130>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <xTaskResumeAll+0x138>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f08:	f001 f8dc 	bl	80080c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000ffc 	.word	0x20000ffc
 8006f1c:	20000fd4 	.word	0x20000fd4
 8006f20:	20000f94 	.word	0x20000f94
 8006f24:	20000fdc 	.word	0x20000fdc
 8006f28:	20000b04 	.word	0x20000b04
 8006f2c:	20000b00 	.word	0x20000b00
 8006f30:	20000fe8 	.word	0x20000fe8
 8006f34:	20000fe4 	.word	0x20000fe4
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <xTaskGetTickCount+0x1c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f48:	687b      	ldr	r3, [r7, #4]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000fd8 	.word	0x20000fd8

08006f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f66:	4b4f      	ldr	r3, [pc, #316]	; (80070a4 <xTaskIncrementTick+0x148>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 808f 	bne.w	800708e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f70:	4b4d      	ldr	r3, [pc, #308]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f78:	4a4b      	ldr	r2, [pc, #300]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d120      	bne.n	8006fc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f84:	4b49      	ldr	r3, [pc, #292]	; (80070ac <xTaskIncrementTick+0x150>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <xTaskIncrementTick+0x46>
 8006fa4:	4b41      	ldr	r3, [pc, #260]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	4b41      	ldr	r3, [pc, #260]	; (80070b0 <xTaskIncrementTick+0x154>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3f      	ldr	r2, [pc, #252]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4a3f      	ldr	r2, [pc, #252]	; (80070b0 <xTaskIncrementTick+0x154>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	4b3e      	ldr	r3, [pc, #248]	; (80070b4 <xTaskIncrementTick+0x158>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a3d      	ldr	r2, [pc, #244]	; (80070b4 <xTaskIncrementTick+0x158>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	f000 fad1 	bl	8007568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fc6:	4b3c      	ldr	r3, [pc, #240]	; (80070b8 <xTaskIncrementTick+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d349      	bcc.n	8007064 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fda:	4b37      	ldr	r3, [pc, #220]	; (80070b8 <xTaskIncrementTick+0x15c>)
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	601a      	str	r2, [r3, #0]
					break;
 8006fe2:	e03f      	b.n	8007064 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe4:	4b31      	ldr	r3, [pc, #196]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d203      	bcs.n	8007004 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ffc:	4a2e      	ldr	r2, [pc, #184]	; (80070b8 <xTaskIncrementTick+0x15c>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007002:	e02f      	b.n	8007064 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe ff99 	bl	8005f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3318      	adds	r3, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe ff90 	bl	8005f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <xTaskIncrementTick+0x160>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d903      	bls.n	8007034 <xTaskIncrementTick+0xd8>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	4a22      	ldr	r2, [pc, #136]	; (80070bc <xTaskIncrementTick+0x160>)
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a1f      	ldr	r2, [pc, #124]	; (80070c0 <xTaskIncrementTick+0x164>)
 8007042:	441a      	add	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe ff1b 	bl	8005e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <xTaskIncrementTick+0x168>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	429a      	cmp	r2, r3
 800705c:	d3b8      	bcc.n	8006fd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007062:	e7b5      	b.n	8006fd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007064:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <xTaskIncrementTick+0x168>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	4915      	ldr	r1, [pc, #84]	; (80070c0 <xTaskIncrementTick+0x164>)
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d901      	bls.n	8007080 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <xTaskIncrementTick+0x16c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e004      	b.n	8007098 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTaskIncrementTick+0x170>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	4a0d      	ldr	r2, [pc, #52]	; (80070cc <xTaskIncrementTick+0x170>)
 8007096:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007098:	697b      	ldr	r3, [r7, #20]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000ffc 	.word	0x20000ffc
 80070a8:	20000fd8 	.word	0x20000fd8
 80070ac:	20000f8c 	.word	0x20000f8c
 80070b0:	20000f90 	.word	0x20000f90
 80070b4:	20000fec 	.word	0x20000fec
 80070b8:	20000ff4 	.word	0x20000ff4
 80070bc:	20000fdc 	.word	0x20000fdc
 80070c0:	20000b04 	.word	0x20000b04
 80070c4:	20000b00 	.word	0x20000b00
 80070c8:	20000fe8 	.word	0x20000fe8
 80070cc:	20000fe4 	.word	0x20000fe4

080070d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070d6:	4b28      	ldr	r3, [pc, #160]	; (8007178 <vTaskSwitchContext+0xa8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070de:	4b27      	ldr	r3, [pc, #156]	; (800717c <vTaskSwitchContext+0xac>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070e4:	e041      	b.n	800716a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80070e6:	4b25      	ldr	r3, [pc, #148]	; (800717c <vTaskSwitchContext+0xac>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ec:	4b24      	ldr	r3, [pc, #144]	; (8007180 <vTaskSwitchContext+0xb0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e010      	b.n	8007116 <vTaskSwitchContext+0x46>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <vTaskSwitchContext+0x40>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	607b      	str	r3, [r7, #4]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <vTaskSwitchContext+0x3e>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3b01      	subs	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	491b      	ldr	r1, [pc, #108]	; (8007184 <vTaskSwitchContext+0xb4>)
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0e4      	beq.n	80070f4 <vTaskSwitchContext+0x24>
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <vTaskSwitchContext+0xb4>)
 8007136:	4413      	add	r3, r2
 8007138:	60bb      	str	r3, [r7, #8]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3308      	adds	r3, #8
 800714c:	429a      	cmp	r2, r3
 800714e:	d104      	bne.n	800715a <vTaskSwitchContext+0x8a>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4a09      	ldr	r2, [pc, #36]	; (8007188 <vTaskSwitchContext+0xb8>)
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	4a06      	ldr	r2, [pc, #24]	; (8007180 <vTaskSwitchContext+0xb0>)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6013      	str	r3, [r2, #0]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000ffc 	.word	0x20000ffc
 800717c:	20000fe8 	.word	0x20000fe8
 8007180:	20000fdc 	.word	0x20000fdc
 8007184:	20000b04 	.word	0x20000b04
 8007188:	20000b00 	.word	0x20000b00

0800718c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	60fb      	str	r3, [r7, #12]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071b2:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <vTaskPlaceOnEventList+0x44>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3318      	adds	r3, #24
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fe fe87 	bl	8005ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071c0:	2101      	movs	r1, #1
 80071c2:	6838      	ldr	r0, [r7, #0]
 80071c4:	f000 fa7c 	bl	80076c0 <prvAddCurrentTaskToDelayedList>
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000b00 	.word	0x20000b00

080071d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	617b      	str	r3, [r7, #20]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <vTaskPlaceOnEventListRestricted+0x54>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3318      	adds	r3, #24
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7fe fe3e 	bl	8005e86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68b8      	ldr	r0, [r7, #8]
 800721a:	f000 fa51 	bl	80076c0 <prvAddCurrentTaskToDelayedList>
	}
 800721e:	bf00      	nop
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000b00 	.word	0x20000b00

0800722c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	60fb      	str	r3, [r7, #12]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3318      	adds	r3, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fe6f 	bl	8005f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007262:	4b1e      	ldr	r3, [pc, #120]	; (80072dc <xTaskRemoveFromEventList+0xb0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11d      	bne.n	80072a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3304      	adds	r3, #4
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fe66 	bl	8005f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <xTaskRemoveFromEventList+0xb4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d903      	bls.n	8007288 <xTaskRemoveFromEventList+0x5c>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <xTaskRemoveFromEventList+0xb4>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <xTaskRemoveFromEventList+0xb8>)
 8007296:	441a      	add	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fe fdf1 	bl	8005e86 <vListInsertEnd>
 80072a4:	e005      	b.n	80072b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3318      	adds	r3, #24
 80072aa:	4619      	mov	r1, r3
 80072ac:	480e      	ldr	r0, [pc, #56]	; (80072e8 <xTaskRemoveFromEventList+0xbc>)
 80072ae:	f7fe fdea 	bl	8005e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <xTaskRemoveFromEventList+0xc0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d905      	bls.n	80072cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <xTaskRemoveFromEventList+0xc4>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e001      	b.n	80072d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072d0:	697b      	ldr	r3, [r7, #20]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000ffc 	.word	0x20000ffc
 80072e0:	20000fdc 	.word	0x20000fdc
 80072e4:	20000b04 	.word	0x20000b04
 80072e8:	20000f94 	.word	0x20000f94
 80072ec:	20000b00 	.word	0x20000b00
 80072f0:	20000fe8 	.word	0x20000fe8

080072f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <vTaskInternalSetTimeOutState+0x24>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <vTaskInternalSetTimeOutState+0x28>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20000fec 	.word	0x20000fec
 800731c:	20000fd8 	.word	0x20000fd8

08007320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	60fb      	str	r3, [r7, #12]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007362:	f000 fe7f 	bl	8008064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <xTaskCheckForTimeOut+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d102      	bne.n	8007386 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e023      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <xTaskCheckForTimeOut+0xc0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d007      	beq.n	80073a2 <xTaskCheckForTimeOut+0x82>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800739c:	2301      	movs	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e015      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d20b      	bcs.n	80073c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff9b 	bl	80072f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e004      	b.n	80073ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ce:	f000 fe79 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80073d2:	69fb      	ldr	r3, [r7, #28]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000fd8 	.word	0x20000fd8
 80073e0:	20000fec 	.word	0x20000fec

080073e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <vTaskMissedYield+0x14>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000fe8 	.word	0x20000fe8

080073fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007404:	f000 f852 	bl	80074ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <prvIdleTask+0x28>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d9f9      	bls.n	8007404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <prvIdleTask+0x2c>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007420:	e7f0      	b.n	8007404 <prvIdleTask+0x8>
 8007422:	bf00      	nop
 8007424:	20000b04 	.word	0x20000b04
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	e00c      	b.n	8007452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <prvInitialiseTaskLists+0x60>)
 8007444:	4413      	add	r3, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fcf0 	bl	8005e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3301      	adds	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b37      	cmp	r3, #55	; 0x37
 8007456:	d9ef      	bls.n	8007438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007458:	480d      	ldr	r0, [pc, #52]	; (8007490 <prvInitialiseTaskLists+0x64>)
 800745a:	f7fe fce7 	bl	8005e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800745e:	480d      	ldr	r0, [pc, #52]	; (8007494 <prvInitialiseTaskLists+0x68>)
 8007460:	f7fe fce4 	bl	8005e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007464:	480c      	ldr	r0, [pc, #48]	; (8007498 <prvInitialiseTaskLists+0x6c>)
 8007466:	f7fe fce1 	bl	8005e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800746a:	480c      	ldr	r0, [pc, #48]	; (800749c <prvInitialiseTaskLists+0x70>)
 800746c:	f7fe fcde 	bl	8005e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007470:	480b      	ldr	r0, [pc, #44]	; (80074a0 <prvInitialiseTaskLists+0x74>)
 8007472:	f7fe fcdb 	bl	8005e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <prvInitialiseTaskLists+0x78>)
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <prvInitialiseTaskLists+0x64>)
 800747a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <prvInitialiseTaskLists+0x7c>)
 800747e:	4a05      	ldr	r2, [pc, #20]	; (8007494 <prvInitialiseTaskLists+0x68>)
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000b04 	.word	0x20000b04
 8007490:	20000f64 	.word	0x20000f64
 8007494:	20000f78 	.word	0x20000f78
 8007498:	20000f94 	.word	0x20000f94
 800749c:	20000fa8 	.word	0x20000fa8
 80074a0:	20000fc0 	.word	0x20000fc0
 80074a4:	20000f8c 	.word	0x20000f8c
 80074a8:	20000f90 	.word	0x20000f90

080074ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b2:	e019      	b.n	80074e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074b4:	f000 fdd6 	bl	8008064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b8:	4b10      	ldr	r3, [pc, #64]	; (80074fc <prvCheckTasksWaitingTermination+0x50>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fd3b 	bl	8005f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ca:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <prvCheckTasksWaitingTermination+0x54>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4a0b      	ldr	r2, [pc, #44]	; (8007500 <prvCheckTasksWaitingTermination+0x54>)
 80074d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3b01      	subs	r3, #1
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074de:	f000 fdf1 	bl	80080c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f810 	bl	8007508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvCheckTasksWaitingTermination+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e1      	bne.n	80074b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000fa8 	.word	0x20000fa8
 8007500:	20000fd4 	.word	0x20000fd4
 8007504:	20000fbc 	.word	0x20000fbc

08007508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	4618      	mov	r0, r3
 8007520:	f000 ff8e 	bl	8008440 <vPortFree>
				vPortFree( pxTCB );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ff8b 	bl	8008440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800752a:	e018      	b.n	800755e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007532:	2b01      	cmp	r3, #1
 8007534:	d103      	bne.n	800753e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 ff82 	bl	8008440 <vPortFree>
	}
 800753c:	e00f      	b.n	800755e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007544:	2b02      	cmp	r3, #2
 8007546:	d00a      	beq.n	800755e <prvDeleteTCB+0x56>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <prvDeleteTCB+0x54>
	}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007580:	e008      	b.n	8007594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000f8c 	.word	0x20000f8c
 80075a4:	20000ff4 	.word	0x20000ff4

080075a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <xTaskGetSchedulerState+0x34>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075b6:	2301      	movs	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	e008      	b.n	80075ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <xTaskGetSchedulerState+0x38>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075c4:	2302      	movs	r3, #2
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	e001      	b.n	80075ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ca:	2300      	movs	r3, #0
 80075cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ce:	687b      	ldr	r3, [r7, #4]
	}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000fe0 	.word	0x20000fe0
 80075e0:	20000ffc 	.word	0x20000ffc

080075e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d056      	beq.n	80076a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075fa:	4b2e      	ldr	r3, [pc, #184]	; (80076b4 <xTaskPriorityDisinherit+0xd0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	429a      	cmp	r2, r3
 8007602:	d00a      	beq.n	800761a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60fb      	str	r3, [r7, #12]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60bb      	str	r3, [r7, #8]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	1e5a      	subs	r2, r3, #1
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764a:	429a      	cmp	r2, r3
 800764c:	d02c      	beq.n	80076a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	2b00      	cmp	r3, #0
 8007654:	d128      	bne.n	80076a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fc70 	bl	8005f40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <xTaskPriorityDisinherit+0xd4>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d903      	bls.n	8007688 <xTaskPriorityDisinherit+0xa4>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <xTaskPriorityDisinherit+0xd4>)
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4a09      	ldr	r2, [pc, #36]	; (80076bc <xTaskPriorityDisinherit+0xd8>)
 8007696:	441a      	add	r2, r3
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7fe fbf1 	bl	8005e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076a8:	697b      	ldr	r3, [r7, #20]
	}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000b00 	.word	0x20000b00
 80076b8:	20000fdc 	.word	0x20000fdc
 80076bc:	20000b04 	.word	0x20000b04

080076c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ca:	4b21      	ldr	r3, [pc, #132]	; (8007750 <prvAddCurrentTaskToDelayedList+0x90>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076d0:	4b20      	ldr	r3, [pc, #128]	; (8007754 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fc32 	bl	8005f40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d10a      	bne.n	80076fa <prvAddCurrentTaskToDelayedList+0x3a>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ea:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <prvAddCurrentTaskToDelayedList+0x94>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4819      	ldr	r0, [pc, #100]	; (8007758 <prvAddCurrentTaskToDelayedList+0x98>)
 80076f4:	f7fe fbc7 	bl	8005e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076f8:	e026      	b.n	8007748 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4413      	add	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <prvAddCurrentTaskToDelayedList+0x94>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	429a      	cmp	r2, r3
 8007710:	d209      	bcs.n	8007726 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <prvAddCurrentTaskToDelayedList+0x94>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7fe fbd5 	bl	8005ece <vListInsert>
}
 8007724:	e010      	b.n	8007748 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <prvAddCurrentTaskToDelayedList+0x94>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fe fbcb 	bl	8005ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d202      	bcs.n	8007748 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007742:	4a08      	ldr	r2, [pc, #32]	; (8007764 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6013      	str	r3, [r2, #0]
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000fd8 	.word	0x20000fd8
 8007754:	20000b00 	.word	0x20000b00
 8007758:	20000fc0 	.word	0x20000fc0
 800775c:	20000f90 	.word	0x20000f90
 8007760:	20000f8c 	.word	0x20000f8c
 8007764:	20000ff4 	.word	0x20000ff4

08007768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007772:	f000 fb07 	bl	8007d84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007776:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <xTimerCreateTimerTask+0x80>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d021      	beq.n	80077c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007786:	1d3a      	adds	r2, r7, #4
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	f107 030c 	add.w	r3, r7, #12
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fb31 	bl	8005df8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	9202      	str	r2, [sp, #8]
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	2302      	movs	r3, #2
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	460a      	mov	r2, r1
 80077a8:	4910      	ldr	r1, [pc, #64]	; (80077ec <xTimerCreateTimerTask+0x84>)
 80077aa:	4811      	ldr	r0, [pc, #68]	; (80077f0 <xTimerCreateTimerTask+0x88>)
 80077ac:	f7ff f8de 	bl	800696c <xTaskCreateStatic>
 80077b0:	4603      	mov	r3, r0
 80077b2:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <xTimerCreateTimerTask+0x8c>)
 80077b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <xTimerCreateTimerTask+0x8c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077be:	2301      	movs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	613b      	str	r3, [r7, #16]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077de:	697b      	ldr	r3, [r7, #20]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20001030 	.word	0x20001030
 80077ec:	08009014 	.word	0x08009014
 80077f0:	0800792d 	.word	0x0800792d
 80077f4:	20001034 	.word	0x20001034

080077f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	623b      	str	r3, [r7, #32]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <xTimerGenericCommand+0x98>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02a      	beq.n	8007884 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b05      	cmp	r3, #5
 800783e:	dc18      	bgt.n	8007872 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007840:	f7ff feb2 	bl	80075a8 <xTaskGetSchedulerState>
 8007844:	4603      	mov	r3, r0
 8007846:	2b02      	cmp	r3, #2
 8007848:	d109      	bne.n	800785e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <xTimerGenericCommand+0x98>)
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	f107 0110 	add.w	r1, r7, #16
 8007852:	2300      	movs	r3, #0
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	f7fe fca1 	bl	800619c <xQueueGenericSend>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24
 800785c:	e012      	b.n	8007884 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <xTimerGenericCommand+0x98>)
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f107 0110 	add.w	r1, r7, #16
 8007866:	2300      	movs	r3, #0
 8007868:	2200      	movs	r2, #0
 800786a:	f7fe fc97 	bl	800619c <xQueueGenericSend>
 800786e:	6278      	str	r0, [r7, #36]	; 0x24
 8007870:	e008      	b.n	8007884 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007872:	4b07      	ldr	r3, [pc, #28]	; (8007890 <xTimerGenericCommand+0x98>)
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f107 0110 	add.w	r1, r7, #16
 800787a:	2300      	movs	r3, #0
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	f7fe fd8b 	bl	8006398 <xQueueGenericSendFromISR>
 8007882:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007886:	4618      	mov	r0, r3
 8007888:	3728      	adds	r7, #40	; 0x28
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20001030 	.word	0x20001030

08007894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b22      	ldr	r3, [pc, #136]	; (8007928 <prvProcessExpiredTimer+0x94>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fb47 	bl	8005f40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d022      	beq.n	8007906 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	18d1      	adds	r1, r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	6978      	ldr	r0, [r7, #20]
 80078ce:	f000 f8d1 	bl	8007a74 <prvInsertTimerInActiveList>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01f      	beq.n	8007918 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2300      	movs	r3, #0
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	2100      	movs	r1, #0
 80078e2:	6978      	ldr	r0, [r7, #20]
 80078e4:	f7ff ff88 	bl	80077f8 <xTimerGenericCommand>
 80078e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d113      	bne.n	8007918 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60fb      	str	r3, [r7, #12]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	6978      	ldr	r0, [r7, #20]
 800791e:	4798      	blx	r3
}
 8007920:	bf00      	nop
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20001028 	.word	0x20001028

0800792c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007934:	f107 0308 	add.w	r3, r7, #8
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f857 	bl	80079ec <prvGetNextExpireTime>
 800793e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4619      	mov	r1, r3
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f803 	bl	8007950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800794a:	f000 f8d5 	bl	8007af8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800794e:	e7f1      	b.n	8007934 <prvTimerTask+0x8>

08007950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800795a:	f7ff fa43 	bl	8006de4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f866 	bl	8007a34 <prvSampleTimeNow>
 8007968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d130      	bne.n	80079d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <prvProcessTimerOrBlockTask+0x3c>
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	429a      	cmp	r2, r3
 800797c:	d806      	bhi.n	800798c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800797e:	f7ff fa3f 	bl	8006e00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ff85 	bl	8007894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800798a:	e024      	b.n	80079d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <prvProcessTimerOrBlockTask+0x90>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <prvProcessTimerOrBlockTask+0x50>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x52>
 80079a0:	2300      	movs	r3, #0
 80079a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <prvProcessTimerOrBlockTask+0x94>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	f7fe ffa7 	bl	8006904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079b6:	f7ff fa23 	bl	8006e00 <xTaskResumeAll>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <prvProcessTimerOrBlockTask+0x98>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
}
 80079d0:	e001      	b.n	80079d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079d2:	f7ff fa15 	bl	8006e00 <xTaskResumeAll>
}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	2000102c 	.word	0x2000102c
 80079e4:	20001030 	.word	0x20001030
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <prvGetNextExpireTime+0x44>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <prvGetNextExpireTime+0x16>
 80079fe:	2201      	movs	r2, #1
 8007a00:	e000      	b.n	8007a04 <prvGetNextExpireTime+0x18>
 8007a02:	2200      	movs	r2, #0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <prvGetNextExpireTime+0x44>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	e001      	b.n	8007a20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a20:	68fb      	ldr	r3, [r7, #12]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	20001028 	.word	0x20001028

08007a34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a3c:	f7ff fa7e 	bl	8006f3c <xTaskGetTickCount>
 8007a40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a42:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <prvSampleTimeNow+0x3c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d205      	bcs.n	8007a58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a4c:	f000 f936 	bl	8007cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e002      	b.n	8007a5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a5e:	4a04      	ldr	r2, [pc, #16]	; (8007a70 <prvSampleTimeNow+0x3c>)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a64:	68fb      	ldr	r3, [r7, #12]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20001038 	.word	0x20001038

08007a74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d812      	bhi.n	8007ac0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d302      	bcc.n	8007aae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e01b      	b.n	8007ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <prvInsertTimerInActiveList+0x7c>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe fa08 	bl	8005ece <vListInsert>
 8007abe:	e012      	b.n	8007ae6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d206      	bcs.n	8007ad6 <prvInsertTimerInActiveList+0x62>
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d302      	bcc.n	8007ad6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e007      	b.n	8007ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <prvInsertTimerInActiveList+0x80>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fe f9f4 	bl	8005ece <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ae6:	697b      	ldr	r3, [r7, #20]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	2000102c 	.word	0x2000102c
 8007af4:	20001028 	.word	0x20001028

08007af8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	; 0x38
 8007afc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007afe:	e0ca      	b.n	8007c96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da18      	bge.n	8007b38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b06:	1d3b      	adds	r3, r7, #4
 8007b08:	3304      	adds	r3, #4
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	61fb      	str	r3, [r7, #28]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2e:	6850      	ldr	r0, [r2, #4]
 8007b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b32:	6892      	ldr	r2, [r2, #8]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f2c0 80aa 	blt.w	8007c94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d004      	beq.n	8007b56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe f9f5 	bl	8005f40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b56:	463b      	mov	r3, r7
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff ff6b 	bl	8007a34 <prvSampleTimeNow>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b09      	cmp	r3, #9
 8007b64:	f200 8097 	bhi.w	8007c96 <prvProcessReceivedCommands+0x19e>
 8007b68:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <prvProcessReceivedCommands+0x78>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007b99 	.word	0x08007b99
 8007b78:	08007b99 	.word	0x08007b99
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c21 	.word	0x08007c21
 8007b84:	08007c6b 	.word	0x08007c6b
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007b99 	.word	0x08007b99
 8007b90:	08007c0d 	.word	0x08007c0d
 8007b94:	08007c21 	.word	0x08007c21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	18d1      	adds	r1, r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb8:	f7ff ff5c 	bl	8007a74 <prvInsertTimerInActiveList>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d069      	beq.n	8007c96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d05e      	beq.n	8007c96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	441a      	add	r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2300      	movs	r3, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bea:	f7ff fe05 	bl	80077f8 <xTimerGenericCommand>
 8007bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d14f      	bne.n	8007c96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	61bb      	str	r3, [r7, #24]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c1e:	e03a      	b.n	8007c96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	617b      	str	r3, [r7, #20]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	18d1      	adds	r1, r2, r3
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c64:	f7ff ff06 	bl	8007a74 <prvInsertTimerInActiveList>
					break;
 8007c68:	e015      	b.n	8007c96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7a:	f000 fbe1 	bl	8008440 <vPortFree>
 8007c7e:	e00a      	b.n	8007c96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c92:	e000      	b.n	8007c96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <prvProcessReceivedCommands+0x1c0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	1d39      	adds	r1, r7, #4
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fc16 	bl	80064d0 <xQueueReceive>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f47f af2a 	bne.w	8007b00 <prvProcessReceivedCommands+0x8>
	}
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3730      	adds	r7, #48	; 0x30
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20001030 	.word	0x20001030

08007cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cc2:	e048      	b.n	8007d56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cc4:	4b2d      	ldr	r3, [pc, #180]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cce:	4b2b      	ldr	r3, [pc, #172]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe f92f 	bl	8005f40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02e      	beq.n	8007d56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d90e      	bls.n	8007d28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d16:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f7fe f8d4 	bl	8005ece <vListInsert>
 8007d26:	e016      	b.n	8007d56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fd60 	bl	80077f8 <xTimerGenericCommand>
 8007d38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	603b      	str	r3, [r7, #0]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1b1      	bne.n	8007cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <prvSwitchTimerLists+0xc4>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <prvSwitchTimerLists+0xc0>)
 8007d6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d6e:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <prvSwitchTimerLists+0xc4>)
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	6013      	str	r3, [r2, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20001028 	.word	0x20001028
 8007d80:	2000102c 	.word	0x2000102c

08007d84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d8a:	f000 f96b 	bl	8008064 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <prvCheckForValidListAndQueue+0x60>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d120      	bne.n	8007dd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d96:	4814      	ldr	r0, [pc, #80]	; (8007de8 <prvCheckForValidListAndQueue+0x64>)
 8007d98:	f7fe f848 	bl	8005e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d9c:	4813      	ldr	r0, [pc, #76]	; (8007dec <prvCheckForValidListAndQueue+0x68>)
 8007d9e:	f7fe f845 	bl	8005e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <prvCheckForValidListAndQueue+0x6c>)
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <prvCheckForValidListAndQueue+0x64>)
 8007da6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007da8:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <prvCheckForValidListAndQueue+0x70>)
 8007daa:	4a10      	ldr	r2, [pc, #64]	; (8007dec <prvCheckForValidListAndQueue+0x68>)
 8007dac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dae:	2300      	movs	r3, #0
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <prvCheckForValidListAndQueue+0x74>)
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <prvCheckForValidListAndQueue+0x78>)
 8007db6:	2110      	movs	r1, #16
 8007db8:	200a      	movs	r0, #10
 8007dba:	f7fe f953 	bl	8006064 <xQueueGenericCreateStatic>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <prvCheckForValidListAndQueue+0x60>)
 8007dc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <prvCheckForValidListAndQueue+0x60>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <prvCheckForValidListAndQueue+0x60>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	490b      	ldr	r1, [pc, #44]	; (8007e00 <prvCheckForValidListAndQueue+0x7c>)
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fd6c 	bl	80068b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd8:	f000 f974 	bl	80080c4 <vPortExitCritical>
}
 8007ddc:	bf00      	nop
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20001030 	.word	0x20001030
 8007de8:	20001000 	.word	0x20001000
 8007dec:	20001014 	.word	0x20001014
 8007df0:	20001028 	.word	0x20001028
 8007df4:	2000102c 	.word	0x2000102c
 8007df8:	200010dc 	.word	0x200010dc
 8007dfc:	2000103c 	.word	0x2000103c
 8007e00:	0800901c 	.word	0x0800901c

08007e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3b04      	subs	r3, #4
 8007e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3b04      	subs	r3, #4
 8007e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 0201 	bic.w	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e34:	4a0c      	ldr	r2, [pc, #48]	; (8007e68 <pxPortInitialiseStack+0x64>)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3b14      	subs	r3, #20
 8007e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f06f 0202 	mvn.w	r2, #2
 8007e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3b20      	subs	r3, #32
 8007e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	08007e6d 	.word	0x08007e6d

08007e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e76:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <prvTaskExitError+0x54>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d00a      	beq.n	8007e96 <prvTaskExitError+0x2a>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <prvTaskExitError+0x28>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60bb      	str	r3, [r7, #8]
}
 8007ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eaa:	bf00      	nop
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0fc      	beq.n	8007eac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	2000000c 	.word	0x2000000c
	...

08007ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <pxCurrentTCBConst2>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6808      	ldr	r0, [r1, #0]
 8007ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f380 8809 	msr	PSP, r0
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8811 	msr	BASEPRI, r0
 8007eea:	4770      	bx	lr
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ef8:	4808      	ldr	r0, [pc, #32]	; (8007f1c <prvPortStartFirstTask+0x24>)
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f380 8808 	msr	MSP, r0
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8814 	msr	CONTROL, r0
 8007f0a:	b662      	cpsie	i
 8007f0c:	b661      	cpsie	f
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	df00      	svc	0
 8007f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f1a:	bf00      	nop
 8007f1c:	e000ed08 	.word	0xe000ed08

08007f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f26:	4b46      	ldr	r3, [pc, #280]	; (8008040 <xPortStartScheduler+0x120>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a46      	ldr	r2, [pc, #280]	; (8008044 <xPortStartScheduler+0x124>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <xPortStartScheduler+0x26>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f46:	4b3e      	ldr	r3, [pc, #248]	; (8008040 <xPortStartScheduler+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a3f      	ldr	r2, [pc, #252]	; (8008048 <xPortStartScheduler+0x128>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10a      	bne.n	8007f66 <xPortStartScheduler+0x46>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <xPortStartScheduler+0x12c>)
 8007f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <xPortStartScheduler+0x130>)
 8007f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <xPortStartScheduler+0x134>)
 8007f90:	2207      	movs	r2, #7
 8007f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f94:	e009      	b.n	8007faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f96:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <xPortStartScheduler+0x134>)
 8007f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb2:	2b80      	cmp	r3, #128	; 0x80
 8007fb4:	d0ef      	beq.n	8007f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fb6:	4b27      	ldr	r3, [pc, #156]	; (8008054 <xPortStartScheduler+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1c3 0307 	rsb	r3, r3, #7
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d00a      	beq.n	8007fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fd8:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <xPortStartScheduler+0x134>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <xPortStartScheduler+0x134>)
 8007fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <xPortStartScheduler+0x138>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <xPortStartScheduler+0x138>)
 8007ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <xPortStartScheduler+0x138>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <xPortStartScheduler+0x138>)
 8008008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800800c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800800e:	f000 f8dd 	bl	80081cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <xPortStartScheduler+0x13c>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008018:	f000 f8fc 	bl	8008214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <xPortStartScheduler+0x140>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <xPortStartScheduler+0x140>)
 8008022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008028:	f7ff ff66 	bl	8007ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800802c:	f7ff f850 	bl	80070d0 <vTaskSwitchContext>
	prvTaskExitError();
 8008030:	f7ff ff1c 	bl	8007e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed00 	.word	0xe000ed00
 8008044:	410fc271 	.word	0x410fc271
 8008048:	410fc270 	.word	0x410fc270
 800804c:	e000e400 	.word	0xe000e400
 8008050:	2000112c 	.word	0x2000112c
 8008054:	20001130 	.word	0x20001130
 8008058:	e000ed20 	.word	0xe000ed20
 800805c:	2000000c 	.word	0x2000000c
 8008060:	e000ef34 	.word	0xe000ef34

08008064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <vPortEnterCritical+0x58>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	4a0d      	ldr	r2, [pc, #52]	; (80080bc <vPortEnterCritical+0x58>)
 8008086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <vPortEnterCritical+0x58>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10f      	bne.n	80080b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortEnterCritical+0x5c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	603b      	str	r3, [r7, #0]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vPortEnterCritical+0x4a>
	}
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <vPortExitCritical+0x50>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <vPortExitCritical+0x24>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	607b      	str	r3, [r7, #4]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vPortExitCritical+0x50>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <vPortExitCritical+0x50>)
 80080f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <vPortExitCritical+0x50>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <vPortExitCritical+0x42>
 80080fa:	2300      	movs	r3, #0
 80080fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f383 8811 	msr	BASEPRI, r3
}
 8008104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000000c 	.word	0x2000000c
	...

08008120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008120:	f3ef 8009 	mrs	r0, PSP
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <pxCurrentTCBConst>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f01e 0f10 	tst.w	lr, #16
 8008130:	bf08      	it	eq
 8008132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008144:	f380 8811 	msr	BASEPRI, r0
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f7fe ffbe 	bl	80070d0 <vTaskSwitchContext>
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f380 8811 	msr	BASEPRI, r0
 800815c:	bc09      	pop	{r0, r3}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	f01e 0f10 	tst.w	lr, #16
 800816a:	bf08      	it	eq
 800816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008170:	f380 8809 	msr	PSP, r0
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst>:
 8008180:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f7fe fedb 	bl	8006f5c <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <xPortSysTickHandler+0x40>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <vPortSetupTimerInterrupt+0x38>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <vPortSetupTimerInterrupt+0x3c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <vPortSetupTimerInterrupt+0x40>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <vPortSetupTimerInterrupt+0x44>)
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000e010 	.word	0xe000e010
 8008204:	e000e018 	.word	0xe000e018
 8008208:	20000000 	.word	0x20000000
 800820c:	10624dd3 	.word	0x10624dd3
 8008210:	e000e014 	.word	0xe000e014

08008214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008224 <vPortEnableVFP+0x10>
 8008218:	6801      	ldr	r1, [r0, #0]
 800821a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800821e:	6001      	str	r1, [r0, #0]
 8008220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008222:	bf00      	nop
 8008224:	e000ed88 	.word	0xe000ed88

08008228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800822e:	f3ef 8305 	mrs	r3, IPSR
 8008232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d914      	bls.n	8008264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <vPortValidateInterruptPriority+0x70>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <vPortValidateInterruptPriority+0x74>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	429a      	cmp	r2, r3
 800824c:	d20a      	bcs.n	8008264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <vPortValidateInterruptPriority+0x78>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <vPortValidateInterruptPriority+0x7c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d90a      	bls.n	800828a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	603b      	str	r3, [r7, #0]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <vPortValidateInterruptPriority+0x60>
	}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	e000e3f0 	.word	0xe000e3f0
 800829c:	2000112c 	.word	0x2000112c
 80082a0:	e000ed0c 	.word	0xe000ed0c
 80082a4:	20001130 	.word	0x20001130

080082a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b4:	f7fe fd96 	bl	8006de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b8:	4b5b      	ldr	r3, [pc, #364]	; (8008428 <pvPortMalloc+0x180>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c0:	f000 f920 	bl	8008504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <pvPortMalloc+0x184>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8093 	bne.w	80083f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01d      	beq.n	8008314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082d8:	2208      	movs	r2, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	3308      	adds	r3, #8
 80082f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <pvPortMalloc+0x6c>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	617b      	str	r3, [r7, #20]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06e      	beq.n	80083f8 <pvPortMalloc+0x150>
 800831a:	4b45      	ldr	r3, [pc, #276]	; (8008430 <pvPortMalloc+0x188>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d869      	bhi.n	80083f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008324:	4b43      	ldr	r3, [pc, #268]	; (8008434 <pvPortMalloc+0x18c>)
 8008326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <pvPortMalloc+0x18c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832e:	e004      	b.n	800833a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d903      	bls.n	800834c <pvPortMalloc+0xa4>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f1      	bne.n	8008330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800834c:	4b36      	ldr	r3, [pc, #216]	; (8008428 <pvPortMalloc+0x180>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008352:	429a      	cmp	r2, r3
 8008354:	d050      	beq.n	80083f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2208      	movs	r2, #8
 800835c:	4413      	add	r3, r2
 800835e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	2308      	movs	r3, #8
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	429a      	cmp	r2, r3
 8008376:	d91f      	bls.n	80083b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <pvPortMalloc+0xf8>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	613b      	str	r3, [r7, #16]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1ad2      	subs	r2, r2, r3
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b2:	69b8      	ldr	r0, [r7, #24]
 80083b4:	f000 f908 	bl	80085c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <pvPortMalloc+0x188>)
 80083c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <pvPortMalloc+0x188>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <pvPortMalloc+0x190>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d203      	bcs.n	80083da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d2:	4b17      	ldr	r3, [pc, #92]	; (8008430 <pvPortMalloc+0x188>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	; (8008438 <pvPortMalloc+0x190>)
 80083d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <pvPortMalloc+0x184>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <pvPortMalloc+0x194>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	4a11      	ldr	r2, [pc, #68]	; (800843c <pvPortMalloc+0x194>)
 80083f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f8:	f7fe fd02 	bl	8006e00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <pvPortMalloc+0x174>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <pvPortMalloc+0x172>
	return pvReturn;
 800841c:	69fb      	ldr	r3, [r7, #28]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3728      	adds	r7, #40	; 0x28
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20004d3c 	.word	0x20004d3c
 800842c:	20004d50 	.word	0x20004d50
 8008430:	20004d40 	.word	0x20004d40
 8008434:	20004d34 	.word	0x20004d34
 8008438:	20004d44 	.word	0x20004d44
 800843c:	20004d48 	.word	0x20004d48

08008440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d04d      	beq.n	80084ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008452:	2308      	movs	r3, #8
 8008454:	425b      	negs	r3, r3
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <vPortFree+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <vPortFree+0x44>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60fb      	str	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <vPortFree+0x62>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60bb      	str	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <vPortFree+0xb8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01e      	beq.n	80084ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <vPortFree+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c8:	f7fe fc8c 	bl	8006de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <vPortFree+0xbc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	4a09      	ldr	r2, [pc, #36]	; (80084fc <vPortFree+0xbc>)
 80084d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 f874 	bl	80085c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <vPortFree+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a06      	ldr	r2, [pc, #24]	; (8008500 <vPortFree+0xc0>)
 80084e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ea:	f7fe fc89 	bl	8006e00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20004d50 	.word	0x20004d50
 80084fc:	20004d40 	.word	0x20004d40
 8008500:	20004d4c 	.word	0x20004d4c

08008504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800850a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800850e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <prvHeapInit+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <prvHeapInit+0xac>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <prvHeapInit+0xb0>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <prvHeapInit+0xb0>)
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008550:	2208      	movs	r2, #8
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <prvHeapInit+0xb4>)
 8008564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <prvHeapInit+0xb4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvHeapInit+0xb4>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <prvHeapInit+0xb8>)
 8008592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <prvHeapInit+0xbc>)
 800859a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <prvHeapInit+0xc0>)
 800859e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	20001134 	.word	0x20001134
 80085b4:	20004d34 	.word	0x20004d34
 80085b8:	20004d3c 	.word	0x20004d3c
 80085bc:	20004d44 	.word	0x20004d44
 80085c0:	20004d40 	.word	0x20004d40
 80085c4:	20004d50 	.word	0x20004d50

080085c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <prvInsertBlockIntoFreeList+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e002      	b.n	80085dc <prvInsertBlockIntoFreeList+0x14>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d8f7      	bhi.n	80085d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	441a      	add	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d118      	bne.n	8008650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d00d      	beq.n	8008646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e008      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e003      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d002      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20004d34 	.word	0x20004d34
 8008678:	20004d3c 	.word	0x20004d3c

0800867c <__errno>:
 800867c:	4b01      	ldr	r3, [pc, #4]	; (8008684 <__errno+0x8>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	; (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	; (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	; (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	; (80086cc <__libc_init_array+0x44>)
 800869c:	f000 fc8e 	bl	8008fbc <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	080090c8 	.word	0x080090c8
 80086c4:	080090c8 	.word	0x080090c8
 80086c8:	080090c8 	.word	0x080090c8
 80086cc:	080090cc 	.word	0x080090cc

080086d0 <memcpy>:
 80086d0:	440a      	add	r2, r1
 80086d2:	4291      	cmp	r1, r2
 80086d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d8:	d100      	bne.n	80086dc <memcpy+0xc>
 80086da:	4770      	bx	lr
 80086dc:	b510      	push	{r4, lr}
 80086de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e6:	4291      	cmp	r1, r2
 80086e8:	d1f9      	bne.n	80086de <memcpy+0xe>
 80086ea:	bd10      	pop	{r4, pc}

080086ec <memset>:
 80086ec:	4402      	add	r2, r0
 80086ee:	4603      	mov	r3, r0
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d100      	bne.n	80086f6 <memset+0xa>
 80086f4:	4770      	bx	lr
 80086f6:	f803 1b01 	strb.w	r1, [r3], #1
 80086fa:	e7f9      	b.n	80086f0 <memset+0x4>

080086fc <siprintf>:
 80086fc:	b40e      	push	{r1, r2, r3}
 80086fe:	b500      	push	{lr}
 8008700:	b09c      	sub	sp, #112	; 0x70
 8008702:	ab1d      	add	r3, sp, #116	; 0x74
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	9006      	str	r0, [sp, #24]
 8008708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800870c:	4809      	ldr	r0, [pc, #36]	; (8008734 <siprintf+0x38>)
 800870e:	9107      	str	r1, [sp, #28]
 8008710:	9104      	str	r1, [sp, #16]
 8008712:	4909      	ldr	r1, [pc, #36]	; (8008738 <siprintf+0x3c>)
 8008714:	f853 2b04 	ldr.w	r2, [r3], #4
 8008718:	9105      	str	r1, [sp, #20]
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	a902      	add	r1, sp, #8
 8008720:	f000 f868 	bl	80087f4 <_svfiprintf_r>
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	b01c      	add	sp, #112	; 0x70
 800872c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008730:	b003      	add	sp, #12
 8008732:	4770      	bx	lr
 8008734:	20000010 	.word	0x20000010
 8008738:	ffff0208 	.word	0xffff0208

0800873c <__ssputs_r>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	688e      	ldr	r6, [r1, #8]
 8008742:	429e      	cmp	r6, r3
 8008744:	4682      	mov	sl, r0
 8008746:	460c      	mov	r4, r1
 8008748:	4690      	mov	r8, r2
 800874a:	461f      	mov	r7, r3
 800874c:	d838      	bhi.n	80087c0 <__ssputs_r+0x84>
 800874e:	898a      	ldrh	r2, [r1, #12]
 8008750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008754:	d032      	beq.n	80087bc <__ssputs_r+0x80>
 8008756:	6825      	ldr	r5, [r4, #0]
 8008758:	6909      	ldr	r1, [r1, #16]
 800875a:	eba5 0901 	sub.w	r9, r5, r1
 800875e:	6965      	ldr	r5, [r4, #20]
 8008760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008768:	3301      	adds	r3, #1
 800876a:	444b      	add	r3, r9
 800876c:	106d      	asrs	r5, r5, #1
 800876e:	429d      	cmp	r5, r3
 8008770:	bf38      	it	cc
 8008772:	461d      	movcc	r5, r3
 8008774:	0553      	lsls	r3, r2, #21
 8008776:	d531      	bpl.n	80087dc <__ssputs_r+0xa0>
 8008778:	4629      	mov	r1, r5
 800877a:	f000 fb55 	bl	8008e28 <_malloc_r>
 800877e:	4606      	mov	r6, r0
 8008780:	b950      	cbnz	r0, 8008798 <__ssputs_r+0x5c>
 8008782:	230c      	movs	r3, #12
 8008784:	f8ca 3000 	str.w	r3, [sl]
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	6921      	ldr	r1, [r4, #16]
 800879a:	464a      	mov	r2, r9
 800879c:	f7ff ff98 	bl	80086d0 <memcpy>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	6126      	str	r6, [r4, #16]
 80087ae:	6165      	str	r5, [r4, #20]
 80087b0:	444e      	add	r6, r9
 80087b2:	eba5 0509 	sub.w	r5, r5, r9
 80087b6:	6026      	str	r6, [r4, #0]
 80087b8:	60a5      	str	r5, [r4, #8]
 80087ba:	463e      	mov	r6, r7
 80087bc:	42be      	cmp	r6, r7
 80087be:	d900      	bls.n	80087c2 <__ssputs_r+0x86>
 80087c0:	463e      	mov	r6, r7
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	4632      	mov	r2, r6
 80087c6:	4641      	mov	r1, r8
 80087c8:	f000 faa8 	bl	8008d1c <memmove>
 80087cc:	68a3      	ldr	r3, [r4, #8]
 80087ce:	1b9b      	subs	r3, r3, r6
 80087d0:	60a3      	str	r3, [r4, #8]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	4433      	add	r3, r6
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	2000      	movs	r0, #0
 80087da:	e7db      	b.n	8008794 <__ssputs_r+0x58>
 80087dc:	462a      	mov	r2, r5
 80087de:	f000 fb97 	bl	8008f10 <_realloc_r>
 80087e2:	4606      	mov	r6, r0
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d1e1      	bne.n	80087ac <__ssputs_r+0x70>
 80087e8:	6921      	ldr	r1, [r4, #16]
 80087ea:	4650      	mov	r0, sl
 80087ec:	f000 fab0 	bl	8008d50 <_free_r>
 80087f0:	e7c7      	b.n	8008782 <__ssputs_r+0x46>
	...

080087f4 <_svfiprintf_r>:
 80087f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	4698      	mov	r8, r3
 80087fa:	898b      	ldrh	r3, [r1, #12]
 80087fc:	061b      	lsls	r3, r3, #24
 80087fe:	b09d      	sub	sp, #116	; 0x74
 8008800:	4607      	mov	r7, r0
 8008802:	460d      	mov	r5, r1
 8008804:	4614      	mov	r4, r2
 8008806:	d50e      	bpl.n	8008826 <_svfiprintf_r+0x32>
 8008808:	690b      	ldr	r3, [r1, #16]
 800880a:	b963      	cbnz	r3, 8008826 <_svfiprintf_r+0x32>
 800880c:	2140      	movs	r1, #64	; 0x40
 800880e:	f000 fb0b 	bl	8008e28 <_malloc_r>
 8008812:	6028      	str	r0, [r5, #0]
 8008814:	6128      	str	r0, [r5, #16]
 8008816:	b920      	cbnz	r0, 8008822 <_svfiprintf_r+0x2e>
 8008818:	230c      	movs	r3, #12
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e0d1      	b.n	80089c6 <_svfiprintf_r+0x1d2>
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	616b      	str	r3, [r5, #20]
 8008826:	2300      	movs	r3, #0
 8008828:	9309      	str	r3, [sp, #36]	; 0x24
 800882a:	2320      	movs	r3, #32
 800882c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008830:	f8cd 800c 	str.w	r8, [sp, #12]
 8008834:	2330      	movs	r3, #48	; 0x30
 8008836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089e0 <_svfiprintf_r+0x1ec>
 800883a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800883e:	f04f 0901 	mov.w	r9, #1
 8008842:	4623      	mov	r3, r4
 8008844:	469a      	mov	sl, r3
 8008846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884a:	b10a      	cbz	r2, 8008850 <_svfiprintf_r+0x5c>
 800884c:	2a25      	cmp	r2, #37	; 0x25
 800884e:	d1f9      	bne.n	8008844 <_svfiprintf_r+0x50>
 8008850:	ebba 0b04 	subs.w	fp, sl, r4
 8008854:	d00b      	beq.n	800886e <_svfiprintf_r+0x7a>
 8008856:	465b      	mov	r3, fp
 8008858:	4622      	mov	r2, r4
 800885a:	4629      	mov	r1, r5
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff ff6d 	bl	800873c <__ssputs_r>
 8008862:	3001      	adds	r0, #1
 8008864:	f000 80aa 	beq.w	80089bc <_svfiprintf_r+0x1c8>
 8008868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800886a:	445a      	add	r2, fp
 800886c:	9209      	str	r2, [sp, #36]	; 0x24
 800886e:	f89a 3000 	ldrb.w	r3, [sl]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80a2 	beq.w	80089bc <_svfiprintf_r+0x1c8>
 8008878:	2300      	movs	r3, #0
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008882:	f10a 0a01 	add.w	sl, sl, #1
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	9307      	str	r3, [sp, #28]
 800888a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800888e:	931a      	str	r3, [sp, #104]	; 0x68
 8008890:	4654      	mov	r4, sl
 8008892:	2205      	movs	r2, #5
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	4851      	ldr	r0, [pc, #324]	; (80089e0 <_svfiprintf_r+0x1ec>)
 800889a:	f7f7 fca1 	bl	80001e0 <memchr>
 800889e:	9a04      	ldr	r2, [sp, #16]
 80088a0:	b9d8      	cbnz	r0, 80088da <_svfiprintf_r+0xe6>
 80088a2:	06d0      	lsls	r0, r2, #27
 80088a4:	bf44      	itt	mi
 80088a6:	2320      	movmi	r3, #32
 80088a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ac:	0711      	lsls	r1, r2, #28
 80088ae:	bf44      	itt	mi
 80088b0:	232b      	movmi	r3, #43	; 0x2b
 80088b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b2a      	cmp	r3, #42	; 0x2a
 80088bc:	d015      	beq.n	80088ea <_svfiprintf_r+0xf6>
 80088be:	9a07      	ldr	r2, [sp, #28]
 80088c0:	4654      	mov	r4, sl
 80088c2:	2000      	movs	r0, #0
 80088c4:	f04f 0c0a 	mov.w	ip, #10
 80088c8:	4621      	mov	r1, r4
 80088ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ce:	3b30      	subs	r3, #48	; 0x30
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	d94e      	bls.n	8008972 <_svfiprintf_r+0x17e>
 80088d4:	b1b0      	cbz	r0, 8008904 <_svfiprintf_r+0x110>
 80088d6:	9207      	str	r2, [sp, #28]
 80088d8:	e014      	b.n	8008904 <_svfiprintf_r+0x110>
 80088da:	eba0 0308 	sub.w	r3, r0, r8
 80088de:	fa09 f303 	lsl.w	r3, r9, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	46a2      	mov	sl, r4
 80088e8:	e7d2      	b.n	8008890 <_svfiprintf_r+0x9c>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	1d19      	adds	r1, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9103      	str	r1, [sp, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bfbb      	ittet	lt
 80088f6:	425b      	neglt	r3, r3
 80088f8:	f042 0202 	orrlt.w	r2, r2, #2
 80088fc:	9307      	strge	r3, [sp, #28]
 80088fe:	9307      	strlt	r3, [sp, #28]
 8008900:	bfb8      	it	lt
 8008902:	9204      	strlt	r2, [sp, #16]
 8008904:	7823      	ldrb	r3, [r4, #0]
 8008906:	2b2e      	cmp	r3, #46	; 0x2e
 8008908:	d10c      	bne.n	8008924 <_svfiprintf_r+0x130>
 800890a:	7863      	ldrb	r3, [r4, #1]
 800890c:	2b2a      	cmp	r3, #42	; 0x2a
 800890e:	d135      	bne.n	800897c <_svfiprintf_r+0x188>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	9203      	str	r2, [sp, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfb8      	it	lt
 800891c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008920:	3402      	adds	r4, #2
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f0 <_svfiprintf_r+0x1fc>
 8008928:	7821      	ldrb	r1, [r4, #0]
 800892a:	2203      	movs	r2, #3
 800892c:	4650      	mov	r0, sl
 800892e:	f7f7 fc57 	bl	80001e0 <memchr>
 8008932:	b140      	cbz	r0, 8008946 <_svfiprintf_r+0x152>
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	eba0 000a 	sub.w	r0, r0, sl
 800893a:	fa03 f000 	lsl.w	r0, r3, r0
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	4303      	orrs	r3, r0
 8008942:	3401      	adds	r4, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894a:	4826      	ldr	r0, [pc, #152]	; (80089e4 <_svfiprintf_r+0x1f0>)
 800894c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008950:	2206      	movs	r2, #6
 8008952:	f7f7 fc45 	bl	80001e0 <memchr>
 8008956:	2800      	cmp	r0, #0
 8008958:	d038      	beq.n	80089cc <_svfiprintf_r+0x1d8>
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <_svfiprintf_r+0x1f4>)
 800895c:	bb1b      	cbnz	r3, 80089a6 <_svfiprintf_r+0x1b2>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	3307      	adds	r3, #7
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	3308      	adds	r3, #8
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896c:	4433      	add	r3, r6
 800896e:	9309      	str	r3, [sp, #36]	; 0x24
 8008970:	e767      	b.n	8008842 <_svfiprintf_r+0x4e>
 8008972:	fb0c 3202 	mla	r2, ip, r2, r3
 8008976:	460c      	mov	r4, r1
 8008978:	2001      	movs	r0, #1
 800897a:	e7a5      	b.n	80088c8 <_svfiprintf_r+0xd4>
 800897c:	2300      	movs	r3, #0
 800897e:	3401      	adds	r4, #1
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	4619      	mov	r1, r3
 8008984:	f04f 0c0a 	mov.w	ip, #10
 8008988:	4620      	mov	r0, r4
 800898a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898e:	3a30      	subs	r2, #48	; 0x30
 8008990:	2a09      	cmp	r2, #9
 8008992:	d903      	bls.n	800899c <_svfiprintf_r+0x1a8>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0c5      	beq.n	8008924 <_svfiprintf_r+0x130>
 8008998:	9105      	str	r1, [sp, #20]
 800899a:	e7c3      	b.n	8008924 <_svfiprintf_r+0x130>
 800899c:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a0:	4604      	mov	r4, r0
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7f0      	b.n	8008988 <_svfiprintf_r+0x194>
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	462a      	mov	r2, r5
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <_svfiprintf_r+0x1f8>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	4638      	mov	r0, r7
 80089b2:	f3af 8000 	nop.w
 80089b6:	1c42      	adds	r2, r0, #1
 80089b8:	4606      	mov	r6, r0
 80089ba:	d1d6      	bne.n	800896a <_svfiprintf_r+0x176>
 80089bc:	89ab      	ldrh	r3, [r5, #12]
 80089be:	065b      	lsls	r3, r3, #25
 80089c0:	f53f af2c 	bmi.w	800881c <_svfiprintf_r+0x28>
 80089c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089c6:	b01d      	add	sp, #116	; 0x74
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	ab03      	add	r3, sp, #12
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	462a      	mov	r2, r5
 80089d2:	4b06      	ldr	r3, [pc, #24]	; (80089ec <_svfiprintf_r+0x1f8>)
 80089d4:	a904      	add	r1, sp, #16
 80089d6:	4638      	mov	r0, r7
 80089d8:	f000 f87a 	bl	8008ad0 <_printf_i>
 80089dc:	e7eb      	b.n	80089b6 <_svfiprintf_r+0x1c2>
 80089de:	bf00      	nop
 80089e0:	0800908c 	.word	0x0800908c
 80089e4:	08009096 	.word	0x08009096
 80089e8:	00000000 	.word	0x00000000
 80089ec:	0800873d 	.word	0x0800873d
 80089f0:	08009092 	.word	0x08009092

080089f4 <_printf_common>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	4616      	mov	r6, r2
 80089fa:	4699      	mov	r9, r3
 80089fc:	688a      	ldr	r2, [r1, #8]
 80089fe:	690b      	ldr	r3, [r1, #16]
 8008a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a04:	4293      	cmp	r3, r2
 8008a06:	bfb8      	it	lt
 8008a08:	4613      	movlt	r3, r2
 8008a0a:	6033      	str	r3, [r6, #0]
 8008a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a10:	4607      	mov	r7, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	b10a      	cbz	r2, 8008a1a <_printf_common+0x26>
 8008a16:	3301      	adds	r3, #1
 8008a18:	6033      	str	r3, [r6, #0]
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	0699      	lsls	r1, r3, #26
 8008a1e:	bf42      	ittt	mi
 8008a20:	6833      	ldrmi	r3, [r6, #0]
 8008a22:	3302      	addmi	r3, #2
 8008a24:	6033      	strmi	r3, [r6, #0]
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	f015 0506 	ands.w	r5, r5, #6
 8008a2c:	d106      	bne.n	8008a3c <_printf_common+0x48>
 8008a2e:	f104 0a19 	add.w	sl, r4, #25
 8008a32:	68e3      	ldr	r3, [r4, #12]
 8008a34:	6832      	ldr	r2, [r6, #0]
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc26      	bgt.n	8008a8a <_printf_common+0x96>
 8008a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a40:	1e13      	subs	r3, r2, #0
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	bf18      	it	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	0692      	lsls	r2, r2, #26
 8008a4a:	d42b      	bmi.n	8008aa4 <_printf_common+0xb0>
 8008a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a50:	4649      	mov	r1, r9
 8008a52:	4638      	mov	r0, r7
 8008a54:	47c0      	blx	r8
 8008a56:	3001      	adds	r0, #1
 8008a58:	d01e      	beq.n	8008a98 <_printf_common+0xa4>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	68e5      	ldr	r5, [r4, #12]
 8008a5e:	6832      	ldr	r2, [r6, #0]
 8008a60:	f003 0306 	and.w	r3, r3, #6
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	bf08      	it	eq
 8008a68:	1aad      	subeq	r5, r5, r2
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	bf0c      	ite	eq
 8008a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a74:	2500      	movne	r5, #0
 8008a76:	4293      	cmp	r3, r2
 8008a78:	bfc4      	itt	gt
 8008a7a:	1a9b      	subgt	r3, r3, r2
 8008a7c:	18ed      	addgt	r5, r5, r3
 8008a7e:	2600      	movs	r6, #0
 8008a80:	341a      	adds	r4, #26
 8008a82:	42b5      	cmp	r5, r6
 8008a84:	d11a      	bne.n	8008abc <_printf_common+0xc8>
 8008a86:	2000      	movs	r0, #0
 8008a88:	e008      	b.n	8008a9c <_printf_common+0xa8>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	4649      	mov	r1, r9
 8008a90:	4638      	mov	r0, r7
 8008a92:	47c0      	blx	r8
 8008a94:	3001      	adds	r0, #1
 8008a96:	d103      	bne.n	8008aa0 <_printf_common+0xac>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	e7c6      	b.n	8008a32 <_printf_common+0x3e>
 8008aa4:	18e1      	adds	r1, r4, r3
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	2030      	movs	r0, #48	; 0x30
 8008aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aae:	4422      	add	r2, r4
 8008ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ab8:	3302      	adds	r3, #2
 8008aba:	e7c7      	b.n	8008a4c <_printf_common+0x58>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4622      	mov	r2, r4
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d0e6      	beq.n	8008a98 <_printf_common+0xa4>
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7d9      	b.n	8008a82 <_printf_common+0x8e>
	...

08008ad0 <_printf_i>:
 8008ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad4:	7e0f      	ldrb	r7, [r1, #24]
 8008ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ad8:	2f78      	cmp	r7, #120	; 0x78
 8008ada:	4691      	mov	r9, r2
 8008adc:	4680      	mov	r8, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	469a      	mov	sl, r3
 8008ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ae6:	d807      	bhi.n	8008af8 <_printf_i+0x28>
 8008ae8:	2f62      	cmp	r7, #98	; 0x62
 8008aea:	d80a      	bhi.n	8008b02 <_printf_i+0x32>
 8008aec:	2f00      	cmp	r7, #0
 8008aee:	f000 80d8 	beq.w	8008ca2 <_printf_i+0x1d2>
 8008af2:	2f58      	cmp	r7, #88	; 0x58
 8008af4:	f000 80a3 	beq.w	8008c3e <_printf_i+0x16e>
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b00:	e03a      	b.n	8008b78 <_printf_i+0xa8>
 8008b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b06:	2b15      	cmp	r3, #21
 8008b08:	d8f6      	bhi.n	8008af8 <_printf_i+0x28>
 8008b0a:	a101      	add	r1, pc, #4	; (adr r1, 8008b10 <_printf_i+0x40>)
 8008b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b10:	08008b69 	.word	0x08008b69
 8008b14:	08008b7d 	.word	0x08008b7d
 8008b18:	08008af9 	.word	0x08008af9
 8008b1c:	08008af9 	.word	0x08008af9
 8008b20:	08008af9 	.word	0x08008af9
 8008b24:	08008af9 	.word	0x08008af9
 8008b28:	08008b7d 	.word	0x08008b7d
 8008b2c:	08008af9 	.word	0x08008af9
 8008b30:	08008af9 	.word	0x08008af9
 8008b34:	08008af9 	.word	0x08008af9
 8008b38:	08008af9 	.word	0x08008af9
 8008b3c:	08008c89 	.word	0x08008c89
 8008b40:	08008bad 	.word	0x08008bad
 8008b44:	08008c6b 	.word	0x08008c6b
 8008b48:	08008af9 	.word	0x08008af9
 8008b4c:	08008af9 	.word	0x08008af9
 8008b50:	08008cab 	.word	0x08008cab
 8008b54:	08008af9 	.word	0x08008af9
 8008b58:	08008bad 	.word	0x08008bad
 8008b5c:	08008af9 	.word	0x08008af9
 8008b60:	08008af9 	.word	0x08008af9
 8008b64:	08008c73 	.word	0x08008c73
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	1d1a      	adds	r2, r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	602a      	str	r2, [r5, #0]
 8008b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0a3      	b.n	8008cc4 <_printf_i+0x1f4>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	6829      	ldr	r1, [r5, #0]
 8008b80:	0606      	lsls	r6, r0, #24
 8008b82:	f101 0304 	add.w	r3, r1, #4
 8008b86:	d50a      	bpl.n	8008b9e <_printf_i+0xce>
 8008b88:	680e      	ldr	r6, [r1, #0]
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	da03      	bge.n	8008b98 <_printf_i+0xc8>
 8008b90:	232d      	movs	r3, #45	; 0x2d
 8008b92:	4276      	negs	r6, r6
 8008b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b98:	485e      	ldr	r0, [pc, #376]	; (8008d14 <_printf_i+0x244>)
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	e019      	b.n	8008bd2 <_printf_i+0x102>
 8008b9e:	680e      	ldr	r6, [r1, #0]
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ba6:	bf18      	it	ne
 8008ba8:	b236      	sxthne	r6, r6
 8008baa:	e7ef      	b.n	8008b8c <_printf_i+0xbc>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	6820      	ldr	r0, [r4, #0]
 8008bb0:	1d19      	adds	r1, r3, #4
 8008bb2:	6029      	str	r1, [r5, #0]
 8008bb4:	0601      	lsls	r1, r0, #24
 8008bb6:	d501      	bpl.n	8008bbc <_printf_i+0xec>
 8008bb8:	681e      	ldr	r6, [r3, #0]
 8008bba:	e002      	b.n	8008bc2 <_printf_i+0xf2>
 8008bbc:	0646      	lsls	r6, r0, #25
 8008bbe:	d5fb      	bpl.n	8008bb8 <_printf_i+0xe8>
 8008bc0:	881e      	ldrh	r6, [r3, #0]
 8008bc2:	4854      	ldr	r0, [pc, #336]	; (8008d14 <_printf_i+0x244>)
 8008bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8008bc6:	bf0c      	ite	eq
 8008bc8:	2308      	moveq	r3, #8
 8008bca:	230a      	movne	r3, #10
 8008bcc:	2100      	movs	r1, #0
 8008bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bd2:	6865      	ldr	r5, [r4, #4]
 8008bd4:	60a5      	str	r5, [r4, #8]
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	bfa2      	ittt	ge
 8008bda:	6821      	ldrge	r1, [r4, #0]
 8008bdc:	f021 0104 	bicge.w	r1, r1, #4
 8008be0:	6021      	strge	r1, [r4, #0]
 8008be2:	b90e      	cbnz	r6, 8008be8 <_printf_i+0x118>
 8008be4:	2d00      	cmp	r5, #0
 8008be6:	d04d      	beq.n	8008c84 <_printf_i+0x1b4>
 8008be8:	4615      	mov	r5, r2
 8008bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bee:	fb03 6711 	mls	r7, r3, r1, r6
 8008bf2:	5dc7      	ldrb	r7, [r0, r7]
 8008bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bf8:	4637      	mov	r7, r6
 8008bfa:	42bb      	cmp	r3, r7
 8008bfc:	460e      	mov	r6, r1
 8008bfe:	d9f4      	bls.n	8008bea <_printf_i+0x11a>
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d10b      	bne.n	8008c1c <_printf_i+0x14c>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	07de      	lsls	r6, r3, #31
 8008c08:	d508      	bpl.n	8008c1c <_printf_i+0x14c>
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	6861      	ldr	r1, [r4, #4]
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	bfde      	ittt	le
 8008c12:	2330      	movle	r3, #48	; 0x30
 8008c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c1c:	1b52      	subs	r2, r2, r5
 8008c1e:	6122      	str	r2, [r4, #16]
 8008c20:	f8cd a000 	str.w	sl, [sp]
 8008c24:	464b      	mov	r3, r9
 8008c26:	aa03      	add	r2, sp, #12
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff fee2 	bl	80089f4 <_printf_common>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d14c      	bne.n	8008cce <_printf_i+0x1fe>
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	b004      	add	sp, #16
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	4835      	ldr	r0, [pc, #212]	; (8008d14 <_printf_i+0x244>)
 8008c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c44:	6829      	ldr	r1, [r5, #0]
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c4c:	6029      	str	r1, [r5, #0]
 8008c4e:	061d      	lsls	r5, r3, #24
 8008c50:	d514      	bpl.n	8008c7c <_printf_i+0x1ac>
 8008c52:	07df      	lsls	r7, r3, #31
 8008c54:	bf44      	itt	mi
 8008c56:	f043 0320 	orrmi.w	r3, r3, #32
 8008c5a:	6023      	strmi	r3, [r4, #0]
 8008c5c:	b91e      	cbnz	r6, 8008c66 <_printf_i+0x196>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	f023 0320 	bic.w	r3, r3, #32
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	2310      	movs	r3, #16
 8008c68:	e7b0      	b.n	8008bcc <_printf_i+0xfc>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f043 0320 	orr.w	r3, r3, #32
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	2378      	movs	r3, #120	; 0x78
 8008c74:	4828      	ldr	r0, [pc, #160]	; (8008d18 <_printf_i+0x248>)
 8008c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c7a:	e7e3      	b.n	8008c44 <_printf_i+0x174>
 8008c7c:	0659      	lsls	r1, r3, #25
 8008c7e:	bf48      	it	mi
 8008c80:	b2b6      	uxthmi	r6, r6
 8008c82:	e7e6      	b.n	8008c52 <_printf_i+0x182>
 8008c84:	4615      	mov	r5, r2
 8008c86:	e7bb      	b.n	8008c00 <_printf_i+0x130>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	6826      	ldr	r6, [r4, #0]
 8008c8c:	6961      	ldr	r1, [r4, #20]
 8008c8e:	1d18      	adds	r0, r3, #4
 8008c90:	6028      	str	r0, [r5, #0]
 8008c92:	0635      	lsls	r5, r6, #24
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	d501      	bpl.n	8008c9c <_printf_i+0x1cc>
 8008c98:	6019      	str	r1, [r3, #0]
 8008c9a:	e002      	b.n	8008ca2 <_printf_i+0x1d2>
 8008c9c:	0670      	lsls	r0, r6, #25
 8008c9e:	d5fb      	bpl.n	8008c98 <_printf_i+0x1c8>
 8008ca0:	8019      	strh	r1, [r3, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	4615      	mov	r5, r2
 8008ca8:	e7ba      	b.n	8008c20 <_printf_i+0x150>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	1d1a      	adds	r2, r3, #4
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	681d      	ldr	r5, [r3, #0]
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7f7 fa92 	bl	80001e0 <memchr>
 8008cbc:	b108      	cbz	r0, 8008cc2 <_printf_i+0x1f2>
 8008cbe:	1b40      	subs	r0, r0, r5
 8008cc0:	6060      	str	r0, [r4, #4]
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ccc:	e7a8      	b.n	8008c20 <_printf_i+0x150>
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	47d0      	blx	sl
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d0ab      	beq.n	8008c34 <_printf_i+0x164>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	079b      	lsls	r3, r3, #30
 8008ce0:	d413      	bmi.n	8008d0a <_printf_i+0x23a>
 8008ce2:	68e0      	ldr	r0, [r4, #12]
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	4298      	cmp	r0, r3
 8008ce8:	bfb8      	it	lt
 8008cea:	4618      	movlt	r0, r3
 8008cec:	e7a4      	b.n	8008c38 <_printf_i+0x168>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	47d0      	blx	sl
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d09b      	beq.n	8008c34 <_printf_i+0x164>
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	68e3      	ldr	r3, [r4, #12]
 8008d00:	9903      	ldr	r1, [sp, #12]
 8008d02:	1a5b      	subs	r3, r3, r1
 8008d04:	42ab      	cmp	r3, r5
 8008d06:	dcf2      	bgt.n	8008cee <_printf_i+0x21e>
 8008d08:	e7eb      	b.n	8008ce2 <_printf_i+0x212>
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	f104 0619 	add.w	r6, r4, #25
 8008d10:	e7f5      	b.n	8008cfe <_printf_i+0x22e>
 8008d12:	bf00      	nop
 8008d14:	0800909d 	.word	0x0800909d
 8008d18:	080090ae 	.word	0x080090ae

08008d1c <memmove>:
 8008d1c:	4288      	cmp	r0, r1
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	eb01 0402 	add.w	r4, r1, r2
 8008d24:	d902      	bls.n	8008d2c <memmove+0x10>
 8008d26:	4284      	cmp	r4, r0
 8008d28:	4623      	mov	r3, r4
 8008d2a:	d807      	bhi.n	8008d3c <memmove+0x20>
 8008d2c:	1e43      	subs	r3, r0, #1
 8008d2e:	42a1      	cmp	r1, r4
 8008d30:	d008      	beq.n	8008d44 <memmove+0x28>
 8008d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3a:	e7f8      	b.n	8008d2e <memmove+0x12>
 8008d3c:	4402      	add	r2, r0
 8008d3e:	4601      	mov	r1, r0
 8008d40:	428a      	cmp	r2, r1
 8008d42:	d100      	bne.n	8008d46 <memmove+0x2a>
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d4e:	e7f7      	b.n	8008d40 <memmove+0x24>

08008d50 <_free_r>:
 8008d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d52:	2900      	cmp	r1, #0
 8008d54:	d044      	beq.n	8008de0 <_free_r+0x90>
 8008d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d5a:	9001      	str	r0, [sp, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d62:	bfb8      	it	lt
 8008d64:	18e4      	addlt	r4, r4, r3
 8008d66:	f000 f913 	bl	8008f90 <__malloc_lock>
 8008d6a:	4a1e      	ldr	r2, [pc, #120]	; (8008de4 <_free_r+0x94>)
 8008d6c:	9801      	ldr	r0, [sp, #4]
 8008d6e:	6813      	ldr	r3, [r2, #0]
 8008d70:	b933      	cbnz	r3, 8008d80 <_free_r+0x30>
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	6014      	str	r4, [r2, #0]
 8008d76:	b003      	add	sp, #12
 8008d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d7c:	f000 b90e 	b.w	8008f9c <__malloc_unlock>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d908      	bls.n	8008d96 <_free_r+0x46>
 8008d84:	6825      	ldr	r5, [r4, #0]
 8008d86:	1961      	adds	r1, r4, r5
 8008d88:	428b      	cmp	r3, r1
 8008d8a:	bf01      	itttt	eq
 8008d8c:	6819      	ldreq	r1, [r3, #0]
 8008d8e:	685b      	ldreq	r3, [r3, #4]
 8008d90:	1949      	addeq	r1, r1, r5
 8008d92:	6021      	streq	r1, [r4, #0]
 8008d94:	e7ed      	b.n	8008d72 <_free_r+0x22>
 8008d96:	461a      	mov	r2, r3
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b10b      	cbz	r3, 8008da0 <_free_r+0x50>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d9fa      	bls.n	8008d96 <_free_r+0x46>
 8008da0:	6811      	ldr	r1, [r2, #0]
 8008da2:	1855      	adds	r5, r2, r1
 8008da4:	42a5      	cmp	r5, r4
 8008da6:	d10b      	bne.n	8008dc0 <_free_r+0x70>
 8008da8:	6824      	ldr	r4, [r4, #0]
 8008daa:	4421      	add	r1, r4
 8008dac:	1854      	adds	r4, r2, r1
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	6011      	str	r1, [r2, #0]
 8008db2:	d1e0      	bne.n	8008d76 <_free_r+0x26>
 8008db4:	681c      	ldr	r4, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	4421      	add	r1, r4
 8008dbc:	6011      	str	r1, [r2, #0]
 8008dbe:	e7da      	b.n	8008d76 <_free_r+0x26>
 8008dc0:	d902      	bls.n	8008dc8 <_free_r+0x78>
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	6003      	str	r3, [r0, #0]
 8008dc6:	e7d6      	b.n	8008d76 <_free_r+0x26>
 8008dc8:	6825      	ldr	r5, [r4, #0]
 8008dca:	1961      	adds	r1, r4, r5
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	bf04      	itt	eq
 8008dd0:	6819      	ldreq	r1, [r3, #0]
 8008dd2:	685b      	ldreq	r3, [r3, #4]
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	bf04      	itt	eq
 8008dd8:	1949      	addeq	r1, r1, r5
 8008dda:	6021      	streq	r1, [r4, #0]
 8008ddc:	6054      	str	r4, [r2, #4]
 8008dde:	e7ca      	b.n	8008d76 <_free_r+0x26>
 8008de0:	b003      	add	sp, #12
 8008de2:	bd30      	pop	{r4, r5, pc}
 8008de4:	20004d54 	.word	0x20004d54

08008de8 <sbrk_aligned>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	4e0e      	ldr	r6, [pc, #56]	; (8008e24 <sbrk_aligned+0x3c>)
 8008dec:	460c      	mov	r4, r1
 8008dee:	6831      	ldr	r1, [r6, #0]
 8008df0:	4605      	mov	r5, r0
 8008df2:	b911      	cbnz	r1, 8008dfa <sbrk_aligned+0x12>
 8008df4:	f000 f8bc 	bl	8008f70 <_sbrk_r>
 8008df8:	6030      	str	r0, [r6, #0]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 f8b7 	bl	8008f70 <_sbrk_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d00a      	beq.n	8008e1c <sbrk_aligned+0x34>
 8008e06:	1cc4      	adds	r4, r0, #3
 8008e08:	f024 0403 	bic.w	r4, r4, #3
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d007      	beq.n	8008e20 <sbrk_aligned+0x38>
 8008e10:	1a21      	subs	r1, r4, r0
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 f8ac 	bl	8008f70 <_sbrk_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d101      	bne.n	8008e20 <sbrk_aligned+0x38>
 8008e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e20:	4620      	mov	r0, r4
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	20004d58 	.word	0x20004d58

08008e28 <_malloc_r>:
 8008e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2c:	1ccd      	adds	r5, r1, #3
 8008e2e:	f025 0503 	bic.w	r5, r5, #3
 8008e32:	3508      	adds	r5, #8
 8008e34:	2d0c      	cmp	r5, #12
 8008e36:	bf38      	it	cc
 8008e38:	250c      	movcc	r5, #12
 8008e3a:	2d00      	cmp	r5, #0
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	db01      	blt.n	8008e44 <_malloc_r+0x1c>
 8008e40:	42a9      	cmp	r1, r5
 8008e42:	d905      	bls.n	8008e50 <_malloc_r+0x28>
 8008e44:	230c      	movs	r3, #12
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	2600      	movs	r6, #0
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	4e2e      	ldr	r6, [pc, #184]	; (8008f0c <_malloc_r+0xe4>)
 8008e52:	f000 f89d 	bl	8008f90 <__malloc_lock>
 8008e56:	6833      	ldr	r3, [r6, #0]
 8008e58:	461c      	mov	r4, r3
 8008e5a:	bb34      	cbnz	r4, 8008eaa <_malloc_r+0x82>
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f7ff ffc2 	bl	8008de8 <sbrk_aligned>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	4604      	mov	r4, r0
 8008e68:	d14d      	bne.n	8008f06 <_malloc_r+0xde>
 8008e6a:	6834      	ldr	r4, [r6, #0]
 8008e6c:	4626      	mov	r6, r4
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	d140      	bne.n	8008ef4 <_malloc_r+0xcc>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	4631      	mov	r1, r6
 8008e76:	4638      	mov	r0, r7
 8008e78:	eb04 0803 	add.w	r8, r4, r3
 8008e7c:	f000 f878 	bl	8008f70 <_sbrk_r>
 8008e80:	4580      	cmp	r8, r0
 8008e82:	d13a      	bne.n	8008efa <_malloc_r+0xd2>
 8008e84:	6821      	ldr	r1, [r4, #0]
 8008e86:	3503      	adds	r5, #3
 8008e88:	1a6d      	subs	r5, r5, r1
 8008e8a:	f025 0503 	bic.w	r5, r5, #3
 8008e8e:	3508      	adds	r5, #8
 8008e90:	2d0c      	cmp	r5, #12
 8008e92:	bf38      	it	cc
 8008e94:	250c      	movcc	r5, #12
 8008e96:	4629      	mov	r1, r5
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ffa5 	bl	8008de8 <sbrk_aligned>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d02b      	beq.n	8008efa <_malloc_r+0xd2>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	442b      	add	r3, r5
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	e00e      	b.n	8008ec8 <_malloc_r+0xa0>
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	1b52      	subs	r2, r2, r5
 8008eae:	d41e      	bmi.n	8008eee <_malloc_r+0xc6>
 8008eb0:	2a0b      	cmp	r2, #11
 8008eb2:	d916      	bls.n	8008ee2 <_malloc_r+0xba>
 8008eb4:	1961      	adds	r1, r4, r5
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	6025      	str	r5, [r4, #0]
 8008eba:	bf18      	it	ne
 8008ebc:	6059      	strne	r1, [r3, #4]
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	bf08      	it	eq
 8008ec2:	6031      	streq	r1, [r6, #0]
 8008ec4:	5162      	str	r2, [r4, r5]
 8008ec6:	604b      	str	r3, [r1, #4]
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f104 060b 	add.w	r6, r4, #11
 8008ece:	f000 f865 	bl	8008f9c <__malloc_unlock>
 8008ed2:	f026 0607 	bic.w	r6, r6, #7
 8008ed6:	1d23      	adds	r3, r4, #4
 8008ed8:	1af2      	subs	r2, r6, r3
 8008eda:	d0b6      	beq.n	8008e4a <_malloc_r+0x22>
 8008edc:	1b9b      	subs	r3, r3, r6
 8008ede:	50a3      	str	r3, [r4, r2]
 8008ee0:	e7b3      	b.n	8008e4a <_malloc_r+0x22>
 8008ee2:	6862      	ldr	r2, [r4, #4]
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	bf0c      	ite	eq
 8008ee8:	6032      	streq	r2, [r6, #0]
 8008eea:	605a      	strne	r2, [r3, #4]
 8008eec:	e7ec      	b.n	8008ec8 <_malloc_r+0xa0>
 8008eee:	4623      	mov	r3, r4
 8008ef0:	6864      	ldr	r4, [r4, #4]
 8008ef2:	e7b2      	b.n	8008e5a <_malloc_r+0x32>
 8008ef4:	4634      	mov	r4, r6
 8008ef6:	6876      	ldr	r6, [r6, #4]
 8008ef8:	e7b9      	b.n	8008e6e <_malloc_r+0x46>
 8008efa:	230c      	movs	r3, #12
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4638      	mov	r0, r7
 8008f00:	f000 f84c 	bl	8008f9c <__malloc_unlock>
 8008f04:	e7a1      	b.n	8008e4a <_malloc_r+0x22>
 8008f06:	6025      	str	r5, [r4, #0]
 8008f08:	e7de      	b.n	8008ec8 <_malloc_r+0xa0>
 8008f0a:	bf00      	nop
 8008f0c:	20004d54 	.word	0x20004d54

08008f10 <_realloc_r>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	4680      	mov	r8, r0
 8008f16:	4614      	mov	r4, r2
 8008f18:	460e      	mov	r6, r1
 8008f1a:	b921      	cbnz	r1, 8008f26 <_realloc_r+0x16>
 8008f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	4611      	mov	r1, r2
 8008f22:	f7ff bf81 	b.w	8008e28 <_malloc_r>
 8008f26:	b92a      	cbnz	r2, 8008f34 <_realloc_r+0x24>
 8008f28:	f7ff ff12 	bl	8008d50 <_free_r>
 8008f2c:	4625      	mov	r5, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	f000 f838 	bl	8008fa8 <_malloc_usable_size_r>
 8008f38:	4284      	cmp	r4, r0
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	d802      	bhi.n	8008f44 <_realloc_r+0x34>
 8008f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f42:	d812      	bhi.n	8008f6a <_realloc_r+0x5a>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7ff ff6e 	bl	8008e28 <_malloc_r>
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d0ed      	beq.n	8008f2e <_realloc_r+0x1e>
 8008f52:	42bc      	cmp	r4, r7
 8008f54:	4622      	mov	r2, r4
 8008f56:	4631      	mov	r1, r6
 8008f58:	bf28      	it	cs
 8008f5a:	463a      	movcs	r2, r7
 8008f5c:	f7ff fbb8 	bl	80086d0 <memcpy>
 8008f60:	4631      	mov	r1, r6
 8008f62:	4640      	mov	r0, r8
 8008f64:	f7ff fef4 	bl	8008d50 <_free_r>
 8008f68:	e7e1      	b.n	8008f2e <_realloc_r+0x1e>
 8008f6a:	4635      	mov	r5, r6
 8008f6c:	e7df      	b.n	8008f2e <_realloc_r+0x1e>
	...

08008f70 <_sbrk_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	; (8008f8c <_sbrk_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7f8 ff58 	bl	8001e30 <_sbrk>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_sbrk_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_sbrk_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20004d5c 	.word	0x20004d5c

08008f90 <__malloc_lock>:
 8008f90:	4801      	ldr	r0, [pc, #4]	; (8008f98 <__malloc_lock+0x8>)
 8008f92:	f000 b811 	b.w	8008fb8 <__retarget_lock_acquire_recursive>
 8008f96:	bf00      	nop
 8008f98:	20004d60 	.word	0x20004d60

08008f9c <__malloc_unlock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__malloc_unlock+0x8>)
 8008f9e:	f000 b80c 	b.w	8008fba <__retarget_lock_release_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	20004d60 	.word	0x20004d60

08008fa8 <_malloc_usable_size_r>:
 8008fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fac:	1f18      	subs	r0, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bfbc      	itt	lt
 8008fb2:	580b      	ldrlt	r3, [r1, r0]
 8008fb4:	18c0      	addlt	r0, r0, r3
 8008fb6:	4770      	bx	lr

08008fb8 <__retarget_lock_acquire_recursive>:
 8008fb8:	4770      	bx	lr

08008fba <__retarget_lock_release_recursive>:
 8008fba:	4770      	bx	lr

08008fbc <_init>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr

08008fc8 <_fini>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr
